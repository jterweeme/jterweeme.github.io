//#define MULTITHREAD

#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <stdint.h>
#include <ctime>
#include <cstring>
#include <math.h>
#ifdef MULTITHREAD
#include <future>
#include <functional>
#include <condition_variable>
#include <mutex>
#include <memory>
#include <thread>
#include <queue>
#include <stdexcept>
#endif
#include <algorithm>
using namespace std;

template <typename T> T myPow(T base, T e)
{   if (e == 0) return 1;
    T ret = base;
    while (--e) ret *= base;
    return ret;
}

static uint32_t fac32(uint32_t n)
{   uint32_t product = 1;
    while (n > 1) product *= n--;
    return product;
}

static uint32_t decimals32(uint32_t n)
{   uint32_t i = 0;
    while (n) n = n / 10, i++;
    return i;
}

static uint32_t digit32(uint32_t n, uint32_t i)
{   return n / myPow<uint32_t>(10, i) % 10;
}

static void sieve32(vector<uint32_t> &out, uint32_t limit)
{   vector<bool> sv(limit, true);
    sv[0] = sv[1] = false;
    for (uint32_t p = 2; p * p < sv.size(); p++)
        if (sv[p] == true)
            for (uint32_t i = p * 2; i < sv.size(); i += p)
                sv[i] = false;
    for (uint32_t i = 0; i < sv.size(); i++)
        if (sv.at(i)) out.push_back(i);
}

static constexpr uint32_t triangle32(uint32_t n) { return n * (n + 1) >> 1; }
static constexpr uint32_t pentagon32(uint32_t n) { return n * (3 * n - 1) / 2; }
static constexpr uint32_t hexagon32(uint32_t n) { return n * (2 * n - 1); }

static bool ispalindrome32(uint32_t n, uint8_t base = 10)
{   uint32_t rev = 0;
    for (uint32_t temp = n; temp != 0; temp /= base) rev = rev * base + temp % base;
    return n == rev;
}

template <typename T> uint32_t linSearch32(vector<T> &vec, T n)
{   for (uint32_t i = 0; i < vec.size(); i++)
        if (vec.at(i) == n) return i + 1;
    return 0;
}

static bool hasDigitsOnce32(uint32_t n, vector<uint8_t> &nset)
{   while (n)
    {   uint32_t pos = linSearch32<uint8_t>(nset, n % 10);
        if (pos) nset.erase(nset.begin() + (pos - 1)); else return false;
        n = n / 10;
    }
    return true;
}

/*
#1 If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

Antwoord: 233,168
*/

static constexpr uint32_t summation1(uint32_t n, uint32_t xmax)
{   uint32_t xlen = xmax / n;
    return ((xlen * (xlen + 1)) >> 1) * n;
}

static uint32_t multiples1(uint32_t limit = 1000)
{   return summation1(3, limit - 1) + summation1(5, limit - 1) - summation1(15, limit - 1);
}

/*
#2 Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.

Antwoord: 4,613,732
*/

static uint32_t fibonacci(uint32_t xmax = 4000000)
{   uint32_t term1 = 1, term2 = 2, temp = 0, xsum = 2;
    while (true)
    {   temp = term1 + term2;
        if (temp > xmax) break;
        if (temp % 2 == 0) xsum += temp;
        term1 = term2, term2 = temp;
    }
    return xsum;
}

/*
#3 The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600,851,475,143?

Antwoord: 6,857
*/

class Primes
{
private:
    vector<uint64_t> _primes;
    void _add();
public:
    Primes();
    static bool test(uint64_t p);
    uint32_t get(uint16_t i);
};

Primes::Primes()
{   _primes.push_back(2);
    _primes.push_back(3);
}

bool Primes::test(uint64_t p)
{   for (uint64_t i = 2; i < p; i++)
        if (p % i == 0) return false;
    return true;
}

void Primes::_add()
{   uint64_t p = _primes.back() + 2;
    while (test(p) == false) p += 2;
    _primes.push_back(p);
}

uint32_t Primes::get(uint16_t i)
{   while (_primes.size() <= i) _add();
    return _primes[i];
}

static uint64_t primefactor(Primes &primes, uint64_t n)
{   for (uint64_t i = 0; ; i++)
        if (n % primes.get(i) == 0)
            return primes.get(i);
}

static void primefactors3(vector<uint64_t> &factors, uint64_t n)
{   Primes primes;
    while (true)
    {   uint64_t factor = primefactor(primes, n);
        factors.push_back(factor);
        if (factor == n) break;
        n = n / factor;
    }
}

static uint64_t maxprimefactor3(uint64_t n = 600851475143)
{   vector<uint64_t> factors;
    primefactors3(factors, n);
    uint64_t best = 0;
    for (vector<uint64_t>::iterator it = factors.begin(); it != factors.end(); it++)
        if (*it > best) best = *it;
    return best;
}

/*
#4 A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

Antwoord: 906,609
*/

static uint32_t opdracht4()
{   uint32_t best = 0;
    for (uint32_t a = 0; a < 1000; a++)
    {   for (uint32_t b = 0; b < 1000; b++)
        {   uint32_t c = a * b;
            if (ispalindrome32(c) && c > best)
                best = c;
        }
    }
    return best;
}

/*
#5 2520 is the smallest number that can be divided by
each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly
divisible by all of the numbers from 1 to 20?

Antwoord: 232,792,560
*/

static inline bool isdivisible(uint32_t n, uint32_t lower, uint32_t max)
{   for (uint32_t i = lower; i <= max; i++) if (n % i > 0) return false;
    return true;
}

static uint32_t divide(uint32_t lower = 11, uint32_t max = 20)
{   uint32_t start = 2520, number = start;
    while (isdivisible(number, lower, max) == false)
        number += start;
    return number;
}

/*
#6 The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025

Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the
first one hundred natural numbers and the square of the sum.

Antwoord: 25,164,150
*/

static uint32_t opdracht6(uint32_t min = 1, uint32_t max = 100)
{   uint32_t sumsquare = 0, squaresum = 0;
    for (uint32_t i = min; i <= max; i++) sumsquare += i * i;
    for (uint32_t i = min; i <= max; i++) squaresum += i;
    squaresum = squaresum * squaresum;
    return squaresum - sumsquare;
}

/*
#7 By listing the first six prime numbers: 2, 3, 5,
7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

Antwoord: 104,743
*/

static uint32_t reducer7(uint32_t n)
{   if (n > 300 * 300) return n / 300;
    if (n > 100 * 100) return n / 100;
    if (n > 8 * 8) return n / 8;
    return n;
}

static uint32_t opdracht7(uint32_t n = 10001)
{   uint32_t p = 3, sqp = reducer7(p), ret = 0;
    for (uint32_t j = 0; j < n - 1; j++)
    {   for (uint32_t i = 2; i < sqp; i++)
            if (p % i == 0) sqp = reducer7(++p), i = 1;
        ret = p, p += 2, sqp = reducer7(p);
    }
    return ret;
}

/*
#8 Largest product in a series

The four adjacent digits in the 1000-digit number that
have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that
have the greatest product. What is the value of this product?

Antwoord: 23,514,624,000
*/

static char series1[] = "73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450";

static uint64_t opdracht8(char *s = series1)
{   uint64_t cur = 0, best = 0;
    while (*s)
    {   cur = (cur % 1000000000000) * 10 + (*s++ - '0');
        uint64_t peel = cur, product = 1;
        while (peel) product *= peel % 10, peel = peel / 10;
        if (product > best) best = product;
    }
    return best;
}

/*
#9 Special Pythagorean triplet

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a2 + b2 = c2

For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.

Antwoord: 31,875,000
*/

static uint32_t opdracht9(uint32_t search = 1000)
{   for (uint32_t a = 1; a <= search - 2; a++)
    {   for (uint32_t b = 1; b <= search - 2; b++)
        {   uint32_t c = search - a - b;
            if (a * a + b * b == c * c)
                return a * b * c;
        }
    }
    return 0;
}

/*
#10 Summation of primes

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

Antwoord: 142,913,828,922
*/

static uint64_t opdracht10(uint32_t limit = 2000000)
{   vector<uint32_t> primes;
    sieve32(primes, limit);
    uint64_t xsum = 0;
    for (auto p : primes) xsum += p;
    return xsum;
}

/*
#11 Largest product in a grid

In the 20×20 grid below, four numbers along
a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same
direction (up, down, left, right, or diagonally) in the 20×20 grid?

Antwoord: 70,600,674
*/

uint8_t t11[20][20] = {{ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8},
            {49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0},
            {81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65},
            {52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91},
            {22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},
            {24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50},
            {32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},
            {67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21},
            {24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},
            {21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95},
            {78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92},
            {16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57},
            {86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58},
            {19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40},
            { 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66},
            {88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69},
            { 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36},
            {20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16},
            {20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54},
            { 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48}};

static uint32_t opdracht11()
{   uint32_t best = 0;
    for (uint8_t i = 0; i < 20; i++)
    {   for (uint8_t j = 0; j < 16; j++)
        {
            uint32_t prod = t11[i][j] * t11[i][j+1] * t11[i][j+2] * t11[i][j+3];
            
            if (prod > best)
                best = prod;

            prod = t11[j][i] * t11[j+1][i] * t11[j+2][i] * t11[j+3][i];

            if (prod > best)
                best = prod;
        }
    }
    
    for (uint8_t i = 0; i < 16; i++)
    {
        for (uint8_t j = 0; j < 16; j++)
        {
            uint32_t prod = t11[i][j] * t11[i+1][j+1] * t11[i+2][j+2] * t11[i+3][j+3];
            
            if (prod > best)
                best = prod;
        }
    }

    for (uint8_t i = 3; i < 20; i++)
    {
        for (uint8_t j = 0; j < 16; j++)
        {
            uint32_t prod = t11[i][j] * t11[i-1][j+1] * t11[i-2][j+2] * t11[i-3][j+3];

            if (prod > best)
                best = prod;
        }
    }

    return best;
}

/*
#12 Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Antwoord: 76,576,500
*/

static uint32_t num_divisors(uint32_t n)
{   if (n % 2 == 0) n = n >> 1;
    uint32_t divisors = 1, count = 0;
    while (n % 2 == 0) count++, n = n >> 1;
    divisors = divisors * (count + 1);
    uint32_t p = 3;
    while (n != 1)
    {   count = 0;
        while (n % p == 0) count++, n = n / p;
        divisors = divisors * (count + 1), p += 2;
    }
    return divisors;
}

static uint32_t find_triangular_index(uint16_t factor_limit = 500)
{   uint32_t n = 1, lnum = num_divisors(n), rnum = num_divisors(n + 1);
    while (lnum * rnum < factor_limit)
        lnum = rnum, rnum = num_divisors(++n + 1);
    return n;
}

static uint32_t opdracht12(uint16_t divisors = 500)
{   uint32_t i = find_triangular_index(divisors);
    return (i * (i + 1)) >> 1;
}

/*
#13 Large sum

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690

Antwoord: 5,537,376,230
*/

char number13[100][51] = {
    {"37107287533902102798797998220837590246510135740250"},
    {"46376937677490009712648124896970078050417018260538"},
    {"74324986199524741059474233309513058123726617309629"},
    {"91942213363574161572522430563301811072406154908250"},
    {"23067588207539346171171980310421047513778063246676"},
    {"89261670696623633820136378418383684178734361726757"},
    {"28112879812849979408065481931592621691275889832738"},
    {"44274228917432520321923589422876796487670272189318"},
    {"47451445736001306439091167216856844588711603153276"},
    {"70386486105843025439939619828917593665686757934951"},
    {"62176457141856560629502157223196586755079324193331"},
    {"64906352462741904929101432445813822663347944758178"},
    {"92575867718337217661963751590579239728245598838407"},
    {"58203565325359399008402633568948830189458628227828"},
    {"80181199384826282014278194139940567587151170094390"},
    {"35398664372827112653829987240784473053190104293586"},
    {"86515506006295864861532075273371959191420517255829"},
    {"71693888707715466499115593487603532921714970056938"},
    {"54370070576826684624621495650076471787294438377604"},
    {"53282654108756828443191190634694037855217779295145"},
    {"36123272525000296071075082563815656710885258350721"},
    {"45876576172410976447339110607218265236877223636045"},
    {"17423706905851860660448207621209813287860733969412"},
    {"81142660418086830619328460811191061556940512689692"},
    {"51934325451728388641918047049293215058642563049483"},
    {"62467221648435076201727918039944693004732956340691"},
    {"15732444386908125794514089057706229429197107928209"},
    {"55037687525678773091862540744969844508330393682126"},
    {"18336384825330154686196124348767681297534375946515"},
    {"80386287592878490201521685554828717201219257766954"},
    {"78182833757993103614740356856449095527097864797581"},
    {"16726320100436897842553539920931837441497806860984"},
    {"48403098129077791799088218795327364475675590848030"},
    {"87086987551392711854517078544161852424320693150332"},
    {"59959406895756536782107074926966537676326235447210"},
    {"69793950679652694742597709739166693763042633987085"},
    {"41052684708299085211399427365734116182760315001271"},
    {"65378607361501080857009149939512557028198746004375"},
    {"35829035317434717326932123578154982629742552737307"},
    {"94953759765105305946966067683156574377167401875275"},
    {"88902802571733229619176668713819931811048770190271"},
    {"25267680276078003013678680992525463401061632866526"},
    {"36270218540497705585629946580636237993140746255962"},
    {"24074486908231174977792365466257246923322810917141"},
    {"91430288197103288597806669760892938638285025333403"},
    {"34413065578016127815921815005561868836468420090470"},
    {"23053081172816430487623791969842487255036638784583"},
    {"11487696932154902810424020138335124462181441773470"},
    {"63783299490636259666498587618221225225512486764533"},
    {"67720186971698544312419572409913959008952310058822"},
    {"95548255300263520781532296796249481641953868218774"},
    {"76085327132285723110424803456124867697064507995236"},
    {"37774242535411291684276865538926205024910326572967"},
    {"23701913275725675285653248258265463092207058596522"},
    {"29798860272258331913126375147341994889534765745501"},
    {"18495701454879288984856827726077713721403798879715"},
    {"38298203783031473527721580348144513491373226651381"},
    {"34829543829199918180278916522431027392251122869539"},
    {"40957953066405232632538044100059654939159879593635"},
    {"29746152185502371307642255121183693803580388584903"},
    {"41698116222072977186158236678424689157993532961922"},
    {"62467957194401269043877107275048102390895523597457"},
    {"23189706772547915061505504953922979530901129967519"},
    {"86188088225875314529584099251203829009407770775672"},
    {"11306739708304724483816533873502340845647058077308"},
    {"82959174767140363198008187129011875491310547126581"},
    {"97623331044818386269515456334926366572897563400500"},
    {"42846280183517070527831839425882145521227251250327"},
    {"55121603546981200581762165212827652751691296897789"},
    {"32238195734329339946437501907836945765883352399886"},
    {"75506164965184775180738168837861091527357929701337"},
    {"62177842752192623401942399639168044983993173312731"},
    {"32924185707147349566916674687634660915035914677504"},
    {"99518671430235219628894890102423325116913619626622"},
    {"73267460800591547471830798392868535206946944540724"},
    {"76841822524674417161514036427982273348055556214818"},
    {"97142617910342598647204516893989422179826088076852"},
    {"87783646182799346313767754307809363333018982642090"},
    {"10848802521674670883215120185883543223812876952786"},
    {"71329612474782464538636993009049310363619763878039"},
    {"62184073572399794223406235393808339651327408011116"},
    {"66627891981488087797941876876144230030984490851411"},
    {"60661826293682836764744779239180335110989069790714"},
    {"85786944089552990653640447425576083659976645795096"},
    {"66024396409905389607120198219976047599490197230297"},
    {"64913982680032973156037120041377903785566085089252"},
    {"16730939319872750275468906903707539413042652315011"},
    {"94809377245048795150954100921645863754710598436791"},
    {"78639167021187492431995700641917969777599028300699"},
    {"15368713711936614952811305876380278410754449733078"},
    {"40789923115535562561142322423255033685442488917353"},
    {"44889911501440648020369068063960672322193204149535"},
    {"41503128880339536053299340368006977710650566631954"},
    {"81234880673210146739058568557934581403627822703280"},
    {"82616570773948327592232845941706525094512325230608"},
    {"22918802058777319719839450180888072429661980811197"},
    {"77158542502016545090413245809786882778948721859617"},
    {"72107838435069186155435662884062257473692284509516"},
    {"20849603980134001723930671666823555245252804609722"},
    {"53503534226472524250874054075591789781264330331690"}};

static uint64_t opdracht13()
{   vector<uint8_t> totalSum;
    uint64_t sum = 0;
    for (uint8_t i = 50; i > 0; i--)
    {   for (uint8_t j = 0; j < 100; j++)
            sum += number13[j][i - 1] - 48;
        totalSum.push_back(sum % 10);
        sum /= 10;
    }
    while (sum > 0)
    {   totalSum.push_back(sum % 10);
        sum /= 10;
    }
    uint8_t start = totalSum.size() - 10;
    for (uint8_t i = 0; i < 10; i++)
        sum += totalSum[start + i] * myPow<uint64_t>(10, i);
    return sum;
}

/*
#14 Longest Collatz sequence

The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

It can be seen that this sequence (starting at 13 and finishing at 1)
contains 10 terms. Although it has not been proved yet (Collatz Problem),
it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.

Antwoord: 837,799
*/

static uint32_t collatz(uint32_t n)
{   uint32_t count = 1;
    while (n > 1) n = n % 2 == 0 ? n >> 1 : n * 3 + 1, count++;
    return count;
}

static uint32_t opdracht14(uint32_t lower = 1, uint32_t upper = 1000000)
{   uint32_t best_start = 0, best_length = 0;
    for (uint32_t i = lower; i < upper; i++)
    {   uint32_t length = collatz(i);
        if (length > best_length)
            best_start = i, best_length = length;
    }
    return best_start;
}

/*
#15 Lattice paths

Starting in the top left corner of a 2x2 grid, and only being able to move
to the right and down, there are exactly 6 routes to the bottom right corner.

How many such routes are there through a 20×20 grid?

Antwoord: 137,846,528,820
*/

static uint64_t opdracht15(uint8_t size = 20)
{   uint64_t paths = 1;
    for (uint8_t i = 0; i < size; i++)
        paths = (paths * (2 * size - i)) / (i + 1);
    return paths;
}

/*
#16 Power digit sum

2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

What is the sum of the digits of the number 2^1000?

Antwoord: 1,366
*/

static uint32_t opdracht16(uint16_t e = 1000)
{   uint8_t largeNum[400] = {0};
    largeNum[0] = 2;
    uint8_t carry = 0;
    uint32_t sum = 0;

    while (--e)
    {
        for (uint16_t i = 0; i < sizeof(largeNum); i++)
        {
            largeNum[i] *= 2;
            largeNum[i] += carry;
            carry = largeNum[i] / 10;
            largeNum[i] = largeNum[i] % 10;
        }
    }

    for (uint16_t i = 0; i < sizeof(largeNum); i++)
        sum += largeNum[i];

    return sum;
}

/*
#17 Number letter counts

If the numbers 1 to 5 are written out in words: one, two, three, four,
five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

If all the numbers from 1 to 1000 (one thousand) inclusive
were written out in words, how many letters would be used?

NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
forty-two) contains 23 letters and 115 (one hundred and fifteen) contains
20 letters. The use of "and" when writing out numbers is in compliance
with British usage.

Antwoord: 21,124
*/

static size_t len(const char *s)
{
    //cout << s << " ";
    return strlen(s);
}

static uint32_t opdracht17()
{
    char arr1[][15] = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen",
        "seventeen", "eighteen", "nineteen",
        "twenty", "thirty", "forty", "fifty", "sixty",
        "seventy", "eighty", "ninety"};

    uint32_t xsum = 0;

    for (uint8_t i = 0; i < 19; i++)
        xsum += len(arr1[i]);

    for (uint8_t i = 19; i < 27; i++)
    {
        xsum += len(arr1[i]);

        for (uint8_t j = 0; j < 9; j++)
            xsum += len(arr1[i]) + len(arr1[j]);
    }

    for (uint8_t i = 0; i < 9; i++)
    {
        xsum += len(arr1[i]) + len("hundred");

        for (uint8_t j = 0; j < 19; j++)
            xsum += len(arr1[i]) + len("hundred") + len("and") + len(arr1[j]);

        for (uint8_t j = 19; j < 27; j++)
        {
            xsum += len(arr1[i]) + len("hundred") + len("and") + len(arr1[j]);

            for (uint8_t k = 0; k < 9; k++)
                xsum += len(arr1[i]) + len("hundredand") + len(arr1[j]) + len(arr1[k]);
        }
    }

    xsum += len("onethousand");
    return xsum;
}

/*
#18: Maximum path sum I

By starting at the top of the triangle below and moving to adjacent
numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this
problem by trying every route. However, Problem 67, is the same
challenge with a triangle containing one-hundred rows; it cannot be
solved by brute force, and requires a clever method! ;o)

Antwoord: 1,074
*/

#if 0
static uint8_t triangle[][4] = {
    {3,0,0,0},
    {7,4,0,0},
    {2,4,6,0},
    {8,5,9,3}};
#else
static uint8_t triangle[][15] = {
    {75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {95,64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {17,47,82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {18,35,87,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {20, 4,82,47,65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {19, 1,23,75, 3,34, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {88, 2,77,73, 7,63,67, 0, 0, 0, 0, 0, 0, 0, 0},
    {99,65, 4,28, 6,16,70,92, 0, 0, 0, 0, 0, 0, 0},
    {41,41,26,56,83,40,80,70,33, 0, 0, 0, 0, 0, 0},
    {41,48,72,33,47,32,37,16,94,29, 0, 0, 0, 0, 0},
    {53,71,44,65,25,43,91,52,97,51,14, 0, 0, 0, 0},
    {70,11,33,28,77,73,17,78,39,68,17,57, 0, 0, 0},
    {91,71,52,38,17,14,91,43,58,50,27,29,48, 0, 0},
    {63,66, 4,68,89,53,67,30,73,16,69,87,40,31, 0},
    { 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23}};
#endif

static uint32_t opdracht18()
{   uint32_t possibilities = myPow<uint64_t>(2, sizeof(triangle[0]) - 1);
    uint32_t best = 0;
    for (uint32_t i = 0; i <= possibilities; i++)
    {   uint32_t index = 0;
        uint32_t sum = triangle[0][0];
        for (uint32_t j = 0; j < sizeof(triangle[0]) - 1; j++)
        {   index = index + (i >> j & 1);
            uint8_t value = triangle[j + 1][index];
            sum += value;
        }
        if (sum > best) best = sum;
    }
    return best;
}

/*
#19 Counting Sundays

You are given the following information, but you may prefer to do some research for yourself.

    * 1 Jan 1900 was a Monday.
    * Thirty days has September,
      April, June and November.
      All the rest have thirty-one,
      Saving February alone,
      Which has twenty-eight, rain or shine.
      And on leap years, twenty-nine.
    * A leap year occurs on any year evenly divisible by 4, but not on a
      century unless it is divisible by 400.

How many Sundays fell on the first of the month during
the twentieth century (1 Jan 1901 to 31 Dec 2000)?

Antwoord: 171
*/

static bool isLeap(uint16_t year)
{   if (year % 4 > 0) return false;
    if (year % 100 > 0) return true;
    return false;
}

static constexpr uint8_t TUESDAY = 0, WEDNESDAY = 1, THURSDAY = 2, FRIDAY = 3, SATURDAY = 4,
    SUNDAY = 5, MONDAY = 6;

static uint32_t opdracht19()
{   uint8_t months[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
    uint32_t day = 0;
    uint32_t sunday_count = 0;
    for (uint32_t year = 1901; year <= 2000; year++)
    {   bool leap = isLeap(year);
        for (uint8_t m = 0; m < 12; m++)
        {   if (day % 7 == SUNDAY)
                sunday_count++;
            day += months[m];
            if (leap == true && months[m] == 28)
                day++;
        }
    }
    return sunday_count;
}

/*
#20 Factorial digit sum

n! means n × (n − 1) × ... × 3 × 2 × 1

For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

Find the sum of the digits in the number 100!

Antwoord: 648
*/

static uint32_t opdracht20(uint8_t f = 100)
{   uint16_t buf[200] = {0};
    buf[0] = f;
    for (uint8_t i = f - 1; i > 0; i--)
    {   uint16_t carry = 0;
        for (uint8_t j = 0; j < 200; j++)
        {   buf[j] *= i;
            buf[j] += carry;
            carry = buf[j] / 10;
            buf[j] = buf[j] % 10;
        }
    }
    uint32_t sum = 0;
    for (uint8_t i = 0; i < 200; i++)
        sum += buf[i];
    return sum;
}

/*
#21 Amicable numbers

Let d(n) be defined as the sum of proper divisors of
n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an
amicable pair and each of a and b are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22,
44, 55 and 110; therefore d(220) = 284. The proper divisors
of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.

Antwoord: 31,626
*/

/*
220 & 284
1184 & 1210
2620 & 2924
5020 & 5564
6232 & 6368
*/

static uint32_t sum_divisors(uint32_t n)
{   uint32_t sum = 0;
    for (uint32_t i = 1; i < n; i++)
        sum += n % i == 0 ? i : 0;
    return sum;
}

static uint32_t amicable_pairs_sum(uint32_t low = 1, uint32_t high = 10000)
{   uint32_t l[high - low] = {0};
    for (uint32_t i = low; i <= high; i++)
        l[i - low] = sum_divisors(i);
    uint32_t sum = 0;
    for (uint32_t i = 0; i <= (high - low); i++)
    {   uint32_t ind = l[i];
        if (i + low < ind && low <= ind && ind <= high && l[ind - low] == i + low)
            sum += (i + low) + ind;
    }
    return sum;
}

/*
#22 Names scores

Using names.txt (right click and 'Save Link/Target As...'), a 46K text
file containing over five-thousand first names, begin by sorting it into
alphabetical order. Then working out the alphabetical value for each name,
multiply this value by its alphabetical position in the list to obtain a name score.

For example, when the list is sorted into alphabetical order, COLIN, which
is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So,
COLIN would obtain a score of 938 × 53 = 49714.

What is the total of all the name scores in the file?
*/

char names22[][50] = {
"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN",
"MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA",
"CAROL","RUTH","SHARON","MICHELLE","LAURA","SARAH","KIMBERLY","DEBORAH",
"JESSICA","SHIRLEY","CYNTHIA","ANGELA","MELISSA","BRENDA","AMY","ANNA",
"REBECCA","VIRGINIA","KATHLEEN","PAMELA","MARTHA","DEBRA","AMANDA",
"STEPHANIE","CAROLYN","CHRISTINE","MARIE","JANET","CATHERINE","FRANCES",
"ANN","JOYCE","DIANE","ALICE","JULIE","HEATHER","TERESA","DORIS","GLORIA",
"EVELYN","JEAN","CHERYL","MILDRED","KATHERINE","JOAN","ASHLEY","JUDITH",
"ROSE","JANICE","KELLY","NICOLE","JUDY","CHRISTINA","KATHY","THERESA",
"BEVERLY","DENISE","TAMMY","IRENE","JANE","LORI","RACHEL","MARILYN","ANDREA",
"KATHRYN","LOUISE","SARA","ANNE","JACQUELINE","WANDA","BONNIE","JULIA","RUBY",
"LOIS","TINA","PHYLLIS","NORMA","PAULA","DIANA","ANNIE","LILLIAN","EMILY",
"ROBIN","PEGGY","CRYSTAL","GLADYS","RITA","DAWN","CONNIE","FLORENCE","TRACY",
"EDNA","TIFFANY","CARMEN","ROSA","CINDY","GRACE","WENDY","VICTORIA","EDITH",
"KIM","SHERRY","SYLVIA","JOSEPHINE","THELMA","SHANNON","SHEILA","ETHEL",
"ELLEN","ELAINE","MARJORIE","CARRIE","CHARLOTTE","MONICA","ESTHER","PAULINE",
"EMMA","JUANITA","ANITA","RHONDA","HAZEL","AMBER","EVA","DEBBIE","APRIL",
"LESLIE","CLARA","LUCILLE","JAMIE","JOANNE","ELEANOR","VALERIE","DANIELLE",
"MEGAN","ALICIA","SUZANNE","MICHELE","GAIL","BERTHA","DARLENE","VERONICA",
"JILL","ERIN","GERALDINE","LAUREN","CATHY","JOANN","LORRAINE","LYNN","SALLY",
"REGINA","ERICA","BEATRICE","DOLORES","BERNICE","AUDREY","YVONNE","ANNETTE",
"JUNE","SAMANTHA","MARION","DANA","STACY","ANA","RENEE","IDA","VIVIAN",
"ROBERTA","HOLLY","BRITTANY","MELANIE","LORETTA","YOLANDA","JEANETTE",
"LAURIE","KATIE","KRISTEN","VANESSA","ALMA","SUE","ELSIE","BETH","JEANNE",
"VICKI","CARLA","TARA","ROSEMARY","EILEEN","TERRI","GERTRUDE","LUCY","TONYA",
"ELLA","STACEY","WILMA","GINA","KRISTIN","JESSIE","NATALIE","AGNES","VERA",
"WILLIE","CHARLENE","BESSIE","DELORES","MELINDA","PEARL","ARLENE","MAUREEN",
"COLLEEN","ALLISON","TAMARA","JOY","GEORGIA","CONSTANCE","LILLIE","CLAUDIA",
"JACKIE","MARCIA","TANYA","NELLIE","MINNIE","MARLENE","HEIDI","GLENDA",
"LYDIA","VIOLA","COURTNEY","MARIAN","STELLA","CAROLINE","DORA","JO",
"VICKIE","MATTIE","TERRY","MAXINE","IRMA","MABEL","MARSHA","MYRTLE","LENA",
"CHRISTY",
"DEANNA","PATSY","HILDA","GWENDOLYN","JENNIE","NORA","MARGIE","NINA","CASSANDRA",
"LEAH","PENNY","KAY","PRISCILLA","NAOMI","CAROLE","BRANDY","OLGA",
"BILLIE","DIANNE","TRACEY","LEONA","JENNY",
"FELICIA","SONIA","MIRIAM","VELMA","BECKY","BOBBIE","VIOLET","KRISTINA","TONI","MISTY",
"MAE","SHELLY","DAISY","RAMONA","SHERRI","ERIKA","KATRINA",
"CLAIRE","LINDSEY","LINDSAY","GENEVA",
"GUADALUPE","BELINDA","MARGARITA","SHERYL","CORA","FAYE","ADA","NATASHA","SABRINA",
"ISABEL","MARGUERITE","HATTIE","HARRIET","MOLLY","CECILIA","KRISTI","BRANDI","BLANCHE",
"SANDY","ROSIE","JOANNA","IRIS","EUNICE","ANGIE","INEZ","LYNDA",
"MADELINE","AMELIA","ALBERTA","GENEVIEVE",
"MONIQUE","JODI","JANIE","MAGGIE","KAYLA","SONYA",
"JAN","LEE","KRISTINE","CANDACE","FANNIE",
"MARYANN","OPAL","ALISON","YVETTE","MELODY","LUZ",
"SUSIE","OLIVIA","FLORA","SHELLEY","KRISTY",
"MAMIE","LULA","LOLA","VERNA","BEULAH","ANTOINETTE","CANDICE","JUANA","JEANNETTE","PAM",
"KELLI","HANNAH","WHITNEY","BRIDGET","KARLA","CELIA","LATOYA","PATTY","SHELIA","GAYLE",
"DELLA","VICKY","LYNNE","SHERI","MARIANNE","KARA",
"JACQUELYN","ERMA","BLANCA","MYRA","LETICIA",
"PAT","KRISTA","ROXANNE","ANGELICA","JOHNNIE","ROBYN","FRANCIS","ADRIENNE","ROSALIE",
"ALEXANDRA","BROOKE","BETHANY","SADIE","BERNADETTE",
"TRACI","JODY","KENDRA","JASMINE","NICHOLE",
"RACHAEL","CHELSEA","MABLE","ERNESTINE","MURIEL","MARCELLA","ELENA","KRYSTAL",
"ANGELINA","NADINE","KARI","ESTELLE","DIANNA","PAULETTE",
"LORA","MONA","DOREEN","ROSEMARIE","ANGEL",
"DESIREE","ANTONIA","HOPE","GINGER","JANIS","BETSY","CHRISTIE","FREDA","MERCEDES",
"MEREDITH","LYNETTE","TERI","CRISTINA","EULA",
"LEIGH","MEGHAN","SOPHIA","ELOISE","ROCHELLE",
"GRETCHEN","CECELIA","RAQUEL","HENRIETTA","ALYSSA","JANA","KELLEY","GWEN","KERRY",
"JENNA","TRICIA","LAVERNE","OLIVE","ALEXIS","TASHA",
"SILVIA","ELVIRA","CASEY","DELIA","SOPHIE",
"KATE","PATTI","LORENA","KELLIE","SONJA","LILA","LANA","DARLA","MAY","MINDY","ESSIE",
"MANDY","LORENE","ELSA","JOSEFINA","JEANNIE","MIRANDA",
"DIXIE","LUCIA","MARTA","FAITH","LELA",
"JOHANNA","SHARI","CAMILLE","TAMI","SHAWNA","ELISA","EBONY","MELBA","ORA","NETTIE",
"TABITHA","OLLIE","JAIME","WINIFRED","KRISTIE","MARINA",
"ALISHA","AIMEE","RENA","MYRNA","MARLA",
"TAMMIE","LATASHA","BONITA","PATRICE","RONDA","SHERRIE","ADDIE","FRANCINE","DELORIS","STACIE",
"ADRIANA","CHERI","SHELBY","ABIGAIL","CELESTE","JEWEL","CARA","ADELE","REBEKAH",
"LUCINDA","DORTHY","CHRIS","EFFIE","TRINA","REBA","SHAWN","SALLIE","AURORA","LENORA","ETTA",
"LOTTIE","KERRI","TRISHA","NIKKI","ESTELLA","FRANCISCA","JOSIE","TRACIE","MARISSA",
"KARIN","BRITTNEY","JANELLE","LOURDES","LAUREL","HELENE","FERN","ELVA","CORINNE","KELSEY",
"INA","BETTIE","ELISABETH","AIDA","CAITLIN","INGRID","IVA","EUGENIA","CHRISTA","GOLDIE",
"CASSIE","MAUDE","JENIFER","THERESE","FRANKIE","DENA","LORNA","JANETTE","LATONYA","CANDY",
"MORGAN","CONSUELO","TAMIKA","ROSETTA","DEBORA","CHERIE","POLLY","DINA","JEWELL","FAY",
"JILLIAN","DOROTHEA","NELL","TRUDY","ESPERANZA","PATRICA","KIMBERLEY","SHANNA","HELENA",
"CAROLINA","CLEO","STEFANIE","ROSARIO","OLA","JANINE","MOLLIE","LUPE","ALISA","LOU",
"MARIBEL","SUSANNE","BETTE","SUSANA","ELISE","CECILE","ISABELLE","LESLEY","JOCELYN",
"PAIGE","JONI","RACHELLE","LEOLA","DAPHNE","ALTA","ESTER","PETRA","GRACIELA","IMOGENE",
"JOLENE","KEISHA","LACEY","GLENNA","GABRIELA","KERI","URSULA","LIZZIE","KIRSTEN","SHANA",
"ADELINE","MAYRA","JAYNE","JACLYN","GRACIE","SONDRA","CARMELA","MARISA","ROSALIND",
"CHARITY","TONIA","BEATRIZ","MARISOL","CLARICE","JEANINE","SHEENA","ANGELINE","FRIEDA",
"LILY","ROBBIE","SHAUNA","MILLIE","CLAUDETTE","CATHLEEN","ANGELIA","GABRIELLE",
"AUTUMN","KATHARINE","SUMMER","JODIE","STACI","LEA","CHRISTI","JIMMIE","JUSTINE",
"ELMA","LUELLA","MARGRET","DOMINIQUE","SOCORRO","RENE","MARTINA","MARGO","MAVIS","CALLIE",
"BOBBI","MARITZA","LUCILE","LEANNE","JEANNINE","DEANA","AILEEN","LORIE","LADONNA",
"WILLA","MANUELA","GALE","SELMA","DOLLY","SYBIL","ABBY","LARA","DALE","IVY","DEE","WINNIE",
"MARCY","LUISA","JERI","MAGDALENA","OFELIA","MEAGAN","AUDRA","MATILDA","LEILA",
"CORNELIA","BIANCA","SIMONE","BETTYE","RANDI","VIRGIE","LATISHA","BARBRA","GEORGINA","ELIZA",
"LEANN","BRIDGETTE","RHODA","HALEY","ADELA","NOLA","BERNADINE","FLOSSIE","ILA",
"GRETA","RUTHIE","NELDA","MINERVA","LILLY","TERRIE",
"LETHA","HILARY","ESTELA","VALARIE","BRIANNA",
"ROSALYN","EARLINE","CATALINA","AVA","MIA","CLARISSA","LIDIA","CORRINE","ALEXANDRIA",
"CONCEPCION","TIA","SHARRON","RAE","DONA","ERICKA","JAMI","ELNORA","CHANDRA","LENORE","NEVA",
"MARYLOU","MELISA","TABATHA","SERENA","AVIS","ALLIE","SOFIA","JEANIE","ODESSA","NANNIE",
"HARRIETT","LORAINE","PENELOPE","MILAGROS","EMILIA","BENITA","ALLYSON","ASHLEE","TANIA",
"TOMMIE","ESMERALDA","KARINA","EVE","PEARLIE","ZELMA","MALINDA","NOREEN","TAMEKA",
"SAUNDRA","HILLARY","AMIE","ALTHEA","ROSALINDA","JORDAN","LILIA","ALANA","GAY","CLARE",
"ALEJANDRA","ELINOR","MICHAEL","LORRIE","JERRI","DARCY","EARNESTINE","CARMELLA",
"TAYLOR","NOEMI","MARCIE","LIZA","ANNABELLE","LOUISA","EARLENE","MALLORY","CARLENE","NITA",
"SELENA","TANISHA","KATY","JULIANNE","JOHN","LAKISHA","EDWINA","MARICELA","MARGERY",
"KENYA","DOLLIE","ROXIE","ROSLYN","KATHRINE","NANETTE","CHARMAINE","LAVONNE","ILENE",
"KRIS","TAMMI","SUZETTE","CORINE","KAYE","JERRY","MERLE","CHRYSTAL","LINA","DEANNE",
"LILIAN","JULIANA","ALINE","LUANN","KASEY","MARYANNE","EVANGELINE","COLETTE","MELVA",
"LAWANDA","YESENIA","NADIA","MADGE","KATHIE","EDDIE","OPHELIA","VALERIA","NONA","MITZI",
"MARI","GEORGETTE","CLAUDINE","FRAN","ALISSA","ROSEANN","LAKEISHA","SUSANNA","REVA",
"DEIDRE","CHASITY","SHEREE","CARLY","JAMES","ELVIA","ALYCE","DEIRDRE","GENA",
"BRIANA","ARACELI","KATELYN","ROSANNE","WENDI","TESSA","BERTA","MARVA","IMELDA","MARIETTA",
"MARCI","LEONOR","ARLINE","SASHA","MADELYN","JANNA","JULIETTE","DEENA","AURELIA","JOSEFA",
"AUGUSTA","LILIANA","YOUNG","CHRISTIAN","LESSIE","AMALIA","SAVANNAH","ANASTASIA",
"VILMA","NATALIA","ROSELLA","LYNNETTE","CORINA","ALFREDA","LEANNA","CAREY","AMPARO",
"COLEEN","TAMRA","AISHA","WILDA","KARYN","CHERRY","QUEEN","MAURA","MAI","EVANGELINA",
"ROSANNA","HALLIE","ERNA","ENID","MARIANA","LACY","JULIET","JACKLYN","FREIDA",
"MADELEINE","MARA","HESTER","CATHRYN","LELIA","CASANDRA","BRIDGETT","ANGELITA","JANNIE",
"DIONNE","ANNMARIE","KATINA","BERYL","PHOEBE","MILLICENT","KATHERYN","DIANN",
"CARISSA","MARYELLEN","LIZ","LAURI","HELGA","GILDA","ADRIAN","RHEA","MARQUITA","HOLLIE",
"TISHA","TAMERA","ANGELIQUE","FRANCESCA","BRITNEY","KAITLIN","LOLITA","FLORINE",
"ROWENA","REYNA","TWILA","FANNY","JANELL","INES","CONCETTA","BERTIE","ALBA","BRIGITTE",
"ALYSON","VONDA","PANSY","ELBA","NOELLE","LETITIA","KITTY","DEANN","BRANDIE",
"LOUELLA","LETA","FELECIA","SHARLENE","LESA","BEVERLEY","ROBERT","ISABELLA","HERMINIA",
"TERRA","CELINA","TORI","OCTAVIA","JADE","DENICE","GERMAINE","SIERRA","MICHELL",
"CORTNEY","NELLY","DORETHA","SYDNEY","DEIDRA","MONIKA","LASHONDA","JUDI","CHELSEY",
"ANTIONETTE","MARGOT","BOBBY","ADELAIDE","NAN","LEEANN","ELISHA","DESSIE","LIBBY",
"KATHI","GAYLA","LATANYA","MINA","MELLISA","KIMBERLEE","JASMIN","RENAE","ZELDA",
"ELDA","MA","JUSTINA","GUSSIE","EMILIE","CAMILLA","ABBIE","ROCIO","KAITLYN","JESSE",
"EDYTHE","ASHLEIGH","SELINA","LAKESHA","GERI","ALLENE","PAMALA","MICHAELA","DAYNA",
"CARYN","ROSALIA","SUN","JACQULINE","REBECA","MARYBETH","KRYSTLE","IOLA","DOTTIE",
"BENNIE","BELLE","AUBREY","GRISELDA","ERNESTINA","ELIDA","ADRIANNE","DEMETRIA",
"DELMA","CHONG","JAQUELINE","DESTINY","ARLEEN","VIRGINA","RETHA","FATIMA","TILLIE",
"ELEANORE","CARI","TREVA","BIRDIE","WILHELMINA","ROSALEE","MAURINE","LATRICE",
"YONG","JENA","TARYN","ELIA","DEBBY","MAUDIE","JEANNA","DELILAH","CATRINA","SHONDA",
"HORTENCIA","THEODORA","TERESITA","ROBBIN","DANETTE","MARYJANE","FREDDIE",
"DELPHINE","BRIANNE","NILDA","DANNA","CINDI","BESS","IONA","HANNA","ARIEL","WINONA",
"VIDA","ROSITA","MARIANNA","WILLIAM","RACHEAL","GUILLERMINA","ELOISA",
"CELESTINE","CAREN","MALISSA","LONA","CHANTEL","SHELLIE","MARISELA","LEORA","AGATHA",
"SOLEDAD","MIGDALIA","IVETTE","CHRISTEN","ATHENA","JANEL","CHLOE","VEDA",
"PATTIE","TESSIE","TERA","MARILYNN","LUCRETIA","KARRIE","DINAH","DANIELA",
"ALECIA","ADELINA","VERNICE","SHIELA","PORTIA","MERRY","LASHAWN","DEVON","DARA","TAWANA",
"OMA","VERDA","CHRISTIN","ALENE","ZELLA","SANDI","RAFAELA","MAYA","KIRA",
"CANDIDA","ALVINA","SUZAN","SHAYLA","LYN","LETTIE","ALVA","SAMATHA","ORALIA","MATILDE",
"MADONNA","LARISSA","VESTA","RENITA","INDIA","DELOIS","SHANDA","PHILLIS",
"LORRI","ERLINDA","CRUZ","CATHRINE","BARB","ZOE","ISABELL","IONE","GISELA","CHARLIE",
"VALENCIA","ROXANNA","MAYME","KISHA","ELLIE","MELLISSA","DORRIS","DALIA",
"BELLA","ANNETTA","ZOILA","RETA","REINA","LAURETTA","KYLIE","CHRISTAL","PILAR","CHARLA",
"ELISSA","TIFFANI","TANA","PAULINA","LEOTA","BREANNA","JAYME","CARMEL",
"VERNELL","TOMASA","MANDI","DOMINGA","SANTA","MELODIE","LURA","ALEXA","TAMELA","RYAN","MIRNA",
"KERRIE","VENUS","NOEL","FELICITA","CRISTY","CARMELITA","BERNIECE","ANNEMARIE",
"TIARA","ROSEANNE","MISSY","CORI","ROXANA","PRICILLA","KRISTAL","JUNG","ELYSE","HAYDEE",
"ALETHA","BETTINA","MARGE","GILLIAN","FILOMENA","CHARLES",
"ZENAIDA","HARRIETTE","CARIDAD","VADA","UNA","ARETHA","PEARLINE",
"MARJORY","MARCELA","FLOR","EVETTE","ELOUISE",
"ALINA","TRINIDAD","DAVID","DAMARIS","CATHARINE","CARROLL","BELVA",
"NAKIA","MARLENA","LUANNE","LORINE","KARON","DORENE",
"DANITA","BRENNA","TATIANA","SAMMIE","LOUANN",
"LOREN","JULIANNA","ANDRIA","PHILOMENA","LUCILA","LEONORA","DOVIE","ROMONA",
"MIMI","JACQUELIN","GAYE","TONJA","MISTI","JOE","GENE",
"CHASTITY","STACIA","ROXANN","MICAELA",
"NIKITA","MEI","VELDA","MARLYS","JOHNNA","AURA","LAVERN","IVONNE","HAYLEY",
"NICKI","MAJORIE","HERLINDA","GEORGE","ALPHA","YADIRA",
"PERLA","GREGORIA","DANIEL","ANTONETTE",
"SHELLI","MOZELLE","MARIAH","JOELLE","CORDELIA","JOSETTE",
"CHIQUITA","TRISTA","LOUIS","LAQUITA","GEORGIANA","CANDI","SHANON",
"LONNIE","HILDEGARD","CECIL","VALENTINA",
"STEPHANY","MAGDA","KAROL","GERRY","GABRIELLA","TIANA","ROMA","RICHELLE","RAY",
"PRINCESS","OLETA","JACQUE","IDELLA","ALAINA","SUZANNA","JOVITA","BLAIR","TOSHA","RAVEN",
"NEREIDA","MARLYN","KYLA","JOSEPH","DELFINA","TENA","STEPHENIE",
"SABINA","NATHALIE","MARCELLE","GERTIE","DARLEEN","THEA",
"SHARONDA","SHANTEL","BELEN","VENESSA",
"ROSALINA","ONA","GENOVEVA","COREY","CLEMENTINE","ROSALBA","RENATE","RENATA",
"MI","IVORY","GEORGIANNA","FLOY","DORCAS","ARIANA","TYRA","THEDA","MARIAM","JULI",
"JESICA","DONNIE","VIKKI","VERLA","ROSELYN","MELVINA","JANNETTE",
"GINNY","DEBRAH","CORRIE","ASIA","VIOLETA","MYRTIS",
"LATRICIA","COLLETTE","CHARLEEN","ANISSA",
"VIVIANA","TWYLA","PRECIOUS","NEDRA","LATONIA","LAN","HELLEN",
"FABIOLA","ANNAMARIE","ADELL","SHARYN","CHANTAL","NIKI",
"MAUD","LIZETTE","LINDY","KIA","KESHA",
"JEANA","DANELLE","CHARLINE","CHANEL","CARROL","VALORIE",
"LIA","DORTHA","CRISTAL","SUNNY","LEONE","LEILANI","GERRI",
"DEBI","ANDRA","KESHIA","IMA","EULALIA",
"EASTER","DULCE","NATIVIDAD","LINNIE","KAMI","GEORGIE","CATINA",
"BROOK","ALDA","WINNIFRED","SHARLA","RUTHANN","MEAGHAN",
"MAGDALENE","LISSETTE","ADELAIDA",
"VENITA","TRENA","SHIRLENE","SHAMEKA","ELIZEBETH","DIAN","SHANTA","MICKEY",
"LATOSHA","CARLOTTA","WINDY","SOON","ROSINA","MARIANN","LEISA","JONNIE","DAWNA",
"CATHIE","BILLY","ASTRID","SIDNEY","LAUREEN","JANEEN","HOLLI",
"FAWN","VICKEY","TERESSA","SHANTE","RUBYE","MARCELINA","CHANDA","CARY","TERESE","SCARLETT",
"MARTY","MARNIE","LULU","LISETTE","JENIFFER","ELENOR",
"DORINDA","DONITA","CARMAN","BERNITA","ALTAGRACIA","ALETA",
"ADRIANNA","ZORAIDA","RONNIE","NICOLA",
"LYNDSEY","KENDALL","JANINA","CHRISSY","AMI","STARLA","PHYLIS",
"PHUONG","KYRA","CHARISSE","BLANCH","SANJUANITA",
"RONA","NANCI","MARILEE","MARANDA","CORY",
"BRIGETTE","SANJUANA","MARITA","KASSANDRA","JOYCELYN","IRA",
"FELIPA","CHELSIE","BONNY","MIREYA","LORENZA","KYONG",
"ILEANA","CANDELARIA","TONY","TOBY",
"SHERIE","OK","MARK","LUCIE","LEATRICE","LAKESHIA","GERDA",
"EDIE","BAMBI","MARYLIN","LAVON","HORTENSE","GARNET","EVIE",
"TRESSA","SHAYNA","LAVINA","KYUNG",
"JEANETTA","SHERRILL","SHARA","PHYLISS","MITTIE","ANABEL","ALESIA",
"THUY","TAWANDA","RICHARD","JOANIE","TIFFANIE","LASHANDA","KARISSA","ENRIQUETA","DARIA",
"DANIELLA","CORINNA","ALANNA","ABBEY","ROXANE","ROSEANNA",
"MAGNOLIA","LIDA","KYLE","JOELLEN","ERA","CORAL","CARLEEN",
"TRESA","PEGGIE","NOVELLA","NILA","MAYBELLE",
"JENELLE","CARINA","NOVA","MELINA","MARQUERITE","MARGARETTE","JOSEPHINA",
"EVONNE","DEVIN","CINTHIA","ALBINA","TOYA","TAWNYA",
"SHERITA","SANTOS","MYRIAM","LIZABETH",
"LISE","KEELY","JENNI","GISELLE","CHERYLE","ARDITH","ARDIS","ALESHA","ADRIANE",
"SHAINA","LINNEA","KAROLYN","HONG","FLORIDA","FELISHA","DORI","DARCI","ARTIE","ARMIDA",
"ZOLA","XIOMARA","VERGIE","SHAMIKA","NENA","NANNETTE","MAXIE",
"LOVIE","JEANE","JAIMIE","INGE","FARRAH","ELAINA","CAITLYN",
"STARR","FELICITAS","CHERLY","CARYL","YOLONDA",
"YASMIN","TEENA","PRUDENCE","PENNIE","NYDIA","MACKENZIE","ORPHA",
"MARVEL","LIZBETH","LAURETTE","JERRIE","HERMELINDA","CAROLEE",
"TIERRA","MIRIAN","META","MELONY","KORI",
"JENNETTE","JAMILA","ENA","ANH","YOSHIKO","SUSANNAH","SALINA",
"RHIANNON","JOLEEN","CRISTINE","ASHTON","ARACELY","TOMEKA",
"SHALONDA","MARTI","LACIE","KALA","JADA","ILSE",
"HAILEY","BRITTANI","ZONA","SYBLE","SHERRYL","RANDY","NIDIA",
"MARLO","KANDICE","KANDI","DEB","DEAN","AMERICA","ALYCIA","TOMMY",
"RONNA","NORENE","MERCY","JOSE","INGEBORG",
"GIOVANNA","GEMMA","CHRISTEL","AUDRY","ZORA","VITA","VAN","TRISH",
"STEPHAINE","SHIRLEE","SHANIKA","MELONIE","MAZIE","JAZMIN","INGA",
"HOA","HETTIE","GERALYN","FONDA",
"ESTRELLA","ADELLA","SU","SARITA","RINA","MILISSA","MARIBETH",
"GOLDA","EVON","ETHELYN","ENEDINA","CHERISE","CHANA","VELVA",
"TAWANNA","SADE","MIRTA","LI","KARIE",
"JACINTA","ELNA","DAVINA","CIERRA","ASHLIE","ALBERTHA","TANESHA",
"STEPHANI","NELLE","MINDI","LU","LORINDA","LARUE","FLORENE",
"DEMETRA","DEDRA","CIARA","CHANTELLE",
"ASHLY","SUZY","ROSALVA","NOELIA","LYDA","LEATHA","KRYSTYNA","KRISTAN","KARRI",
"DARLINE","DARCIE","CINDA","CHEYENNE","CHERRIE","AWILDA","ALMEDA","ROLANDA","LANETTE",
"JERILYN","GISELE","EVALYN","CYNDI","CLETA","CARIN","ZINA","ZENA","VELIA",
"TANIKA","PAUL","CHARISSA","THOMAS","TALIA","MARGARETE","LAVONDA","KAYLEE","KATHLENE",
"JONNA","IRENA","ILONA","IDALIA","CANDIS","CANDANCE","BRANDEE","ANITRA",
"ALIDA","SIGRID","NICOLETTE","MARYJO","LINETTE","HEDWIG",
"CHRISTIANA","CASSIDY","ALEXIA",
"TRESSIE","MODESTA","LUPITA","LITA","GLADIS","EVELIA","DAVIDA","CHERRI","CECILY",
"ASHELY","ANNABEL","AGUSTINA","WANITA","SHIRLY","ROSAURA","HULDA","EUN","BAILEY",
"YETTA","VERONA","THOMASINA","SIBYL","SHANNAN","MECHELLE",
"LUE","LEANDRA","LANI","KYLEE","KANDY","JOLYNN","FERNE","EBONI","CORENE",
"ALYSIA","ZULA","NADA","MOIRA",
"LYNDSAY","LORRETTA","JUAN","JAMMIE","HORTENSIA","GAYNELL","CAMERON",
"ADRIA","VINA","VICENTA","TANGELA","STEPHINE","NORINE",
"NELLA","LIANA","LESLEE","KIMBERELY",
"ILIANA","GLORY","FELICA","EMOGENE","ELFRIEDE","EDEN","EARTHA","CARMA",
"BEA","OCIE","MARRY","LENNIE","KIARA","JACALYN","CARLOTA",
"ARIELLE","YU","STAR","OTILIA",
"KIRSTIN","KACEY","JOHNETTA","JOEY","JOETTA","JERALDINE","JAUNITA",
"ELANA","DORTHEA","CAMI","AMADA","ADELIA","VERNITA","TAMAR",
"SIOBHAN","RENEA","RASHIDA","OUIDA",
"ODELL","NILSA","MERYL","KRISTYN","JULIETA","DANICA","BREANNE","AUREA",
"ANGLEA","SHERRON","ODETTE","MALIA","LORELEI","LIN",
"LEESA","KENNA","KATHLYN","FIONA",
"CHARLETTE","SUZIE","SHANTELL","SABRA","RACQUEL","MYONG","MIRA",
"MARTINE","LUCIENNE","LAVADA","JULIANN","JOHNIE","ELVERA",
"DELPHIA","CLAIR","CHRISTIANE",
"CHAROLETTE","CARRI","AUGUSTINE","ASHA","ANGELLA","PAOLA","NINFA",
"LEDA","LAI","EDA","SUNSHINE","STEFANI","SHANELL","PALMA",
"MACHELLE","LISSA","KECIA",
"KATHRYNE","KARLENE","JULISSA","JETTIE","JENNIFFER","HUI",
"CORRINA","CHRISTOPHER","CAROLANN","ALENA","TESS","ROSARIA",
"MYRTICE","MARYLEE","LIANE","KENYATTA",
"JUDIE","JANEY","IN","ELMIRA","ELDORA","DENNA","CRISTI","CATHI",
"ZAIDA","VONNIE","VIVA","VERNIE","ROSALINE","MARIELA","LUCIANA",
"LESLI","KARAN","FELICE",
"DENEEN","ADINA","WYNONA","TARSHA","SHERON","SHASTA","SHANITA",
"SHANI","SHANDRA","RANDA","PINKIE","PARIS","NELIDA","MARILOU",
"LYLA","LAURENE","LACI","JOI",
"JANENE","DOROTHA","DANIELE","DANI","CAROLYNN","CARLYN","BERENICE",
"AYESHA","ANNELIESE","ALETHEA","THERSA","TAMIKO","RUFINA",
"OLIVA","MOZELL","MARYLYN",
"MADISON","KRISTIAN","KATHYRN","KASANDRA","KANDACE","JANAE",
"GABRIEL","DOMENICA","DEBBRA","DANNIELLE","CHUN","BUFFY",
"BARBIE","ARCELIA","AJA","ZENOBIA",
"SHAREN","SHAREE","PATRICK","PAGE","MY","LAVINIA","KUM",
"KACIE","JACKELINE","HUONG","FELISA","EMELIA","ELEANORA",
"CYTHIA","CRISTIN","CLYDE","CLARIBEL",
"CARON","ANASTACIA","ZULMA","ZANDRA","YOKO","TENISHA","SUSANN",
"SHERILYN","SHAY","SHAWANDA","SABINE","ROMANA",
"MATHILDA","LINSEY","KEIKO","JOANA","ISELA",
"GRETTA","GEORGETTA","EUGENIE","DUSTY","DESIRAE","DELORA","CORAZON","ANTONINA",
"ANIKA","WILLENE","TRACEE","TAMATHA","REGAN","NICHELLE","MICKIE","MAEGAN",
"LUANA","LANITA","KELSIE","EDELMIRA","BREE","AFTON",
"TEODORA","TAMIE","SHENA","MEG","LINH","KELI","KACI",
"DANYELLE","BRITT","ARLETTE","ALBERTINE","ADELLE",
"TIFFINY","STORMY","SIMONA","NUMBERS","NICOLASA","NICHOL",
"NIA","NAKISHA","MEE","MAIRA","LOREEN","KIZZY","JOHNNY",
"JAY","FALLON","CHRISTENE","BOBBYE",
"ANTHONY","YING","VINCENZA","TANJA","RUBIE","RONI","QUEENIE",
"MARGARETT","KIMBERLI","IRMGARD","IDELL","HILMA",
"EVELINA","ESTA","EMILEE","DENNISE","DANIA",
"CARL","CARIE","ANTONIO","WAI","SANG","RISA","RIKKI",
"PARTICIA","MUI","MASAKO","MARIO","LUVENIA","LOREE",
"LONI","LIEN","KEVIN","GIGI","FLORENCIA","DORIAN",
"DENITA","DALLAS","CHI","BILLYE","ALEXANDER","TOMIKA",
"SHARITA","RANA","NIKOLE","NEOMA","MARGARITE","MADALYN",
"LUCINA","LAILA","KALI","JENETTE","GABRIELE",
"EVELYNE","ELENORA","CLEMENTINA","ALEJANDRINA","ZULEMA","VIOLETTE",
"VANNESSA","THRESA","RETTA","PIA","PATIENCE","NOELLA","NICKIE","JONELL","DELTA","CHUNG",
"CHAYA","CAMELIA","BETHEL","ANYA","ANDREW","THANH","SUZANN",
"SPRING","SHU","MILA","LILLA","LAVERNA","KEESHA",
"KATTIE","GIA","GEORGENE","EVELINE","ESTELL",
"ELIZBETH","VIVIENNE","VALLIE","TRUDIE","STEPHANE","MICHEL",
"MAGALY","MADIE","KENYETTA","KARREN","JANETTA","HERMINE",
"HARMONY","DRUCILLA","DEBBI","CELESTINA",
"CANDIE","BRITNI","BECKIE","AMINA","ZITA","YUN","YOLANDE",
"VIVIEN","VERNETTA","TRUDI","SOMMER","PEARLE","PATRINA",
"OSSIE","NICOLLE","LOYCE","LETTY","LARISA",
"KATHARINA","JOSELYN","JONELLE","JENELL","IESHA","HEIDE",
"FLORINDA","FLORENTINA","FLO","ELODIA","DORINE","BRUNILDA",
"BRIGID","ASHLI","ARDELLA","TWANA","THU",
"TARAH","SUNG","SHEA","SHAVON","SHANE","SERINA","RAYNA","RAMONITA",
"NGA","MARGURITE","LUCRECIA","KOURTNEY","KATI",
"JESUS","JESENIA","DIAMOND","CRISTA","AYANA",
"ALICA","ALIA","VINNIE","SUELLEN","ROMELIA","RACHELL","PIPER",
"OLYMPIA","MICHIKO","KATHALEEN","JOLIE","JESSI","JANESSA",
"HANA","HA","ELEASE","CARLETTA","BRITANY",
"SHONA","SALOME","ROSAMOND","REGENA","RAINA","NGOC","NELIA",
"LOUVENIA","LESIA","LATRINA","LATICIA","LARHONDA","JINA",
"JACKI","HOLLIS","HOLLEY","EMMY","DEEANN",
"CORETTA","ARNETTA","VELVET","THALIA","SHANICE","NETA","MIKKI","MICKI",
"LONNA","LEANA","LASHUNDA","KILEY","JOYE","JACQULYN","IGNACIA",
"HYUN","HIROKO","HENRY",
"HENRIETTE","ELAYNE","DELINDA","DARNELL","DAHLIA","COREEN",
"CONSUELA","CONCHITA","CELINE","BABETTE","AYANNA","ANETTE",
"ALBERTINA","SKYE","SHAWNEE","SHANEKA",
"QUIANA","PAMELIA","MIN","MERRI","MERLENE","MARGIT","KIESHA",
"KIERA","KAYLENE","JODEE","JENISE","ERLENE","EMMIE","ELSE",
"DARYL","DALILA","DAISEY","CODY","CASIE",
"BELIA","BABARA","VERSIE","VANESA","SHELBA","SHAWNDA","SAM","NORMAN",
"NIKIA","NAOMA","MARNA","MARGERET","MADALINE","LAWANA",
"KINDRA","JUTTA","JAZMINE","JANETT",
"HANNELORE","GLENDORA","GERTRUD","GARNETT","FREEDA","FREDERICA",
"FLORANCE","FLAVIA","DENNIS","CARLINE","BEVERLEE","ANJANETTE",
"VALDA","TRINITY","TAMALA","STEVIE",
"SHONNA","SHA","SARINA","ONEIDA","MICAH","MERILYN","MARLEEN",
"LURLINE","LENNA","KATHERIN","JIN","JENI","HAE","GRACIA",
"GLADY","FARAH","ERIC","ENOLA","EMA",
"DOMINQUE","DEVONA","DELANA","CECILA","CAPRICE","ALYSHA",
"ALI","ALETHIA","VENA","THERESIA","TAWNY","SONG","SHAKIRA",
"SAMARA","SACHIKO","RACHELE","PAMELLA",
"NICKY","MARNI","MARIEL","MAREN","MALISA","LIGIA","LERA",
"LATORIA","LARAE","KIMBER","KATHERN","KAREY","JENNEFER",
"JANETH","HALINA","FREDIA","DELISA",
"DEBROAH","CIERA","CHIN","ANGELIKA","ANDREE","ALTHA","YEN",
"VIVAN","TERRESA","TANNA","SUK","SUDIE","SOO",
"SIGNE","SALENA","RONNI","REBBECCA","MYRTIE",
"MCKENZIE","MALIKA","MAIDA","LOAN","LEONARDA","KAYLEIGH",
"FRANCE","ETHYL","ELLYN","DAYLE","CAMMIE","BRITTNI","BIRGIT",
"AVELINA","ASUNCION","ARIANNA",
"AKIKO","VENICE","TYESHA","TONIE","TIESHA","TAKISHA",
"STEFFANIE","SINDY","SANTANA","MEGHANN","MANDA","MACIE",
"LADY","KELLYE","KELLEE","JOSLYN","JASON",
"INGER","INDIRA","GLINDA","GLENNIS","FERNANDA","FAUSTINA",
"ENEIDA","ELICIA","DOT","DIGNA","DELL","ARLETTA","ANDRE","WILLIA","TAMMARA","TABETHA",
"SHERRELL","SARI","REFUGIO","REBBECA","PAULETTA","NIEVES",
"NATOSHA","NAKITA","MAMMIE","KENISHA","KAZUKO","KASSIE",
"GARY","EARLEAN","DAPHINE","CORLISS",
"CLOTILDE","CAROLYNE","BERNETTA","AUGUSTINA","AUDREA",
"ANNIS","ANNABELL","YAN","TENNILLE","TAMICA","SELENE",
"SEAN","ROSANA","REGENIA","QIANA","MARKITA",
"MACY","LEEANNE","LAURINE","KYM","JESSENIA","JANITA",
"GEORGINE","GENIE","EMIKO","ELVIE","DEANDRA","DAGMAR",
"CORIE","COLLEN","CHERISH","ROMAINE","PORSHA",
"PEARLENE","MICHELINE","MERNA","MARGORIE","MARGARETTA","LORE","KENNETH",
"JENINE","HERMINA","FREDERICKA","ELKE","DRUSILLA","DORATHY","DIONE","DESIRE",
"CELENA","BRIGIDA","ANGELES","ALLEGRA","THEO","TAMEKIA",
"SYNTHIA","STEPHEN","SOOK","SLYVIA","ROSANN",
"REATHA","RAYE","MARQUETTA","MARGART","LING",
"LAYLA","KYMBERLY","KIANA","KAYLEEN","KATLYN",
"KARMEN","JOELLA","IRINA","EMELDA","ELENI","DETRA",
"CLEMMIE","CHERYLL","CHANTELL","CATHEY","ARNITA",
"ARLA","ANGLE","ANGELIC","ALYSE","ZOFIA","THOMASINE",
"TENNIE","SON","SHERLY","SHERLEY","SHARYL","REMEDIOS",
"PETRINA","NICKOLE","MYUNG","MYRLE",
"MOZELLA","LOUANNE","LISHA","LATIA","LANE","KRYSTA",
"JULIENNE","JOEL","JEANENE","JACQUALINE","ISAURA",
"GWENDA","EARLEEN","DONALD","CLEOPATRA",
"CARLIE","AUDIE","ANTONIETTA","ALISE","ALEX","VERDELL",
"VAL","TYLER","TOMOKO","THAO","TALISHA","STEVEN","SO",
"SHEMIKA","SHAUN","SCARLET","SAVANNA",
"SANTINA","ROSIA","RAEANN","ODILIA","NANA","MINNA","MAGAN",
"LYNELLE","LE","KARMA","JOEANN","IVANA",
"INELL","ILANA","HYE","HONEY","HEE","GUDRUN",
"FRANK","DREAMA","CRISSY","CHANTE","CARMELINA","ARVILLA","ARTHUR",
"ANNAMAE","ALVERA","ALEIDA","AARON","YEE","YANIRA","VANDA","TIANNA","TAM",
"STEFANIA","SHIRA","PERRY","NICOL","NANCIE","MONSERRATE","MINH","MELYNDA",
"MELANY","MATTHEW","LOVELLA","LAURE","KIRBY","KACY","JACQUELYNN",
"HYON","GERTHA","FRANCISCO","ELIANA","CHRISTENA","CHRISTEEN","CHARISE",
"CATERINA","CARLEY","CANDYCE","ARLENA","AMMIE","YANG","WILLETTE",
"VANITA","TUYET","TINY","SYREETA","SILVA","SCOTT","RONALD","PENNEY",
"NYLA","MICHAL","MAURICE","MARYAM","MARYA","MAGEN","LUDIE","LOMA",
"LIVIA","LANELL","KIMBERLIE","JULEE","DONETTA","DIEDRA","DENISHA","DEANE",
"DAWNE","CLARINE","CHERRYL","BRONWYN","BRANDON","ALLA","VALERY",
"TONDA","SUEANN","SORAYA","SHOSHANA","SHELA","SHARLEEN","SHANELLE","NERISSA",
"MICHEAL","MERIDITH","MELLIE","MAYE","MAPLE","MAGARET","LUIS",
"LILI","LEONILA","LEONIE","LEEANNA","LAVONIA","LAVERA","KRISTEL","KATHEY",
"KATHE","JUSTIN","JULIAN","JIMMY","JANN","ILDA","HILDRED","HILDEGARDE",
"GENIA","FUMIKO","EVELIN","ERMELINDA","ELLY","DUNG","DOLORIS",
"DIONNA","DANAE","BERNEICE","ANNICE","ALIX","VERENA","VERDIE","TRISTAN","SHAWNNA",
"SHAWANA","SHAUNNA","ROZELLA","RANDEE","RANAE","MILAGRO","LYNELL",
"LUISE","LOUIE","LOIDA","LISBETH","KARLEEN","JUNITA","JONA","ISIS","HYACINTH",
"HEDY","GWENN","ETHELENE","ERLINE","EDWARD","DONYA","DOMONIQUE","DELICIA",
"DANNETTE","CICELY","BRANDA","BLYTHE","BETHANN","ASHLYN","ANNALEE",
"ALLINE","YUKO","VELLA","TRANG","TOWANDA","TESHA","SHERLYN","NARCISA",
"MIGUELINA","MERI","MAYBELL","MARLANA","MARGUERITA","MADLYN","LUNA","LORY",
"LORIANN","LIBERTY","LEONORE","LEIGHANN","LAURICE","LATESHA","LARONDA",
"KATRICE","KASIE","KARL","KALEY","JADWIGA","GLENNIE","GEARLDINE","FRANCINA",
"EPIFANIA","DYAN","DORIE","DIEDRE","DENESE","DEMETRICE","DELENA",
"DARBY","CRISTIE","CLEORA","CATARINA","CARISA","BERNIE","BARBERA","ALMETA","TRULA",
"TEREASA","SOLANGE","SHEILAH","SHAVONNE","SANORA","ROCHELL","MATHILDE",
"MARGARETA","MAIA","LYNSEY","LAWANNA","LAUNA","KENA","KEENA","KATIA","JAMEY",
"GLYNDA","GAYLENE","ELVINA","ELANOR","DANUTA","DANIKA","CRISTEN",
"CORDIE","COLETTA","CLARITA","CARMON","BRYNN","AZUCENA","AUNDREA","ANGELE","YI",
"WALTER","VERLIE","VERLENE","TAMESHA","SILVANA","SEBRINA","SAMIRA",
"REDA","RAYLENE","PENNI","PANDORA","NORAH","NOMA","MIREILLE","MELISSIA",
"MARYALICE","LARAINE","KIMBERY","KARYL","KARINE","KAM","JOLANDA","JOHANA",
"JESUSA","JALEESA","JAE","JACQUELYNE","IRISH","ILUMINADA","HILARIA",
"HANH","GENNIE","FRANCIE","FLORETTA","EXIE","EDDA","DREMA","DELPHA",
"BEV","BARBAR","ASSUNTA","ARDELL","ANNALISA","ALISIA","YUKIKO","YOLANDO",
"WONDA","WEI","WALTRAUD","VETA","TEQUILA","TEMEKA","TAMEIKA",
"SHIRLEEN","SHENITA","PIEDAD","OZELLA","MIRTHA","MARILU","KIMIKO","JULIANE","JENICE",
"JEN","JANAY","JACQUILINE","HILDE","FE","FAE","EVAN","EUGENE","ELOIS",
"ECHO","DEVORAH","CHAU","BRINDA","BETSEY","ARMINDA","ARACELIS","APRYL",
"ANNETT","ALISHIA","VEOLA","USHA","TOSHIKO","THEOLA","TASHIA","TALITHA",
"SHERY","RUDY","RENETTA","REIKO","RASHEEDA","OMEGA","OBDULIA","MIKA",
"MELAINE","MEGGAN","MARTIN","MARLEN","MARGET","MARCELINE","MANA",
"MAGDALEN","LIBRADA","LEZLIE","LEXIE","LATASHIA","LASANDRA","KELLE","ISIDRA",
"ISA","INOCENCIA","GWYN","FRANCOISE","ERMINIA","ERINN","DIMPLE",
"DEVORA","CRISELDA","ARMANDA","ARIE","ARIANE","ANGELO","ANGELENA","ALLEN",
"ALIZA","ADRIENE","ADALINE","XOCHITL","TWANNA","TRAN","TOMIKO","TAMISHA",
"TAISHA","SUSY","SIU","RUTHA","ROXY","RHONA","RAYMOND","OTHA","NORIKO",
"NATASHIA","MERRIE","MELVIN","MARINDA","MARIKO","MARGERT",
"LORIS","LIZZETTE","LEISHA","KAILA","KA","JOANNIE","JERRICA","JENE","JANNET","JANEE",
"JACINDA","HERTA","ELENORE","DORETTA","DELAINE","DANIELL","CLAUDIE","CHINA",
"BRITTA","APOLONIA","AMBERLY","ALEASE","YURI","YUK","WEN","WANETA",
"UTE","TOMI","SHARRI","SANDIE","ROSELLE","REYNALDA","RAGUEL",
"PHYLICIA","PATRIA","OLIMPIA","ODELIA","MITZIE","MITCHELL","MISS","MINDA","MIGNON",
"MICA","MENDY","MARIVEL","MAILE","LYNETTA","LAVETTE","LAURYN",
"LATRISHA","LAKIESHA","KIERSTEN","KARY","JOSPHINE","JOLYN","JETTA","JANISE","JACQUIE",
"IVELISSE","GLYNIS","GIANNA","GAYNELLE","EMERALD","DEMETRIUS",
"DANYELL","DANILLE","DACIA","CORALEE","CHER","CEOLA","BRETT","BELL","ARIANNE","ALESHIA",
"YUNG","WILLIEMAE","TROY","TRINH","THORA","TAI","SVETLANA",
"SHERIKA","SHEMEKA","SHAUNDA","ROSELINE","RICKI","MELDA","MALLIE","LAVONNA","LATINA",
"LARRY","LAQUANDA","LALA","LACHELLE","KLARA","KANDIS","JOHNA",
"JEANMARIE","JAYE","HANG","GRAYCE","GERTUDE","EMERITA","EBONIE","CLORINDA","CHING",
"CHERY","CAROLA","BREANN","BLOSSOM","BERNARDINE","BECKI","ARLETHA","ARGELIA",
"ARA","ALITA","YULANDA","YON","YESSENIA","TOBI","TASIA","SYLVIE",
"SHIRL","SHIRELY","SHERIDAN","SHELLA","SHANTELLE","SACHA","ROYCE","REBECKA",
"REAGAN","PROVIDENCIA","PAULENE","MISHA","MIKI","MARLINE","MARICA",
"LORITA","LATOYIA","LASONYA","KERSTIN","KENDA","KEITHA","KATHRIN","JAYMIE",
"JACK","GRICELDA","GINETTE","ERYN","ELINA","ELFRIEDA","DANYEL","CHEREE",
"CHANELLE","BARRIE","AVERY","AURORE","ANNAMARIA","ALLEEN","AILENE","AIDE",
"YASMINE","VASHTI","VALENTINE","TREASA","TORY","TIFFANEY","SHERYLL",
"SHARIE","SHANAE","SAU","RAISA","PA","NEDA","MITSUKO","MIRELLA","MILDA",
"MARYANNA","MARAGRET","MABELLE","LUETTA","LORINA","LETISHA","LATARSHA",
"LANELLE","LAJUANA","KRISSY","KARLY","KARENA","JON","JESSIKA","JERICA",
"JEANELLE","JANUARY","JALISA","JACELYN","IZOLA","IVEY","GREGORY","EUNA",
"ETHA","DREW","DOMITILA","DOMINICA","DAINA","CREOLA","CARLI","CAMIE",
"BUNNY","BRITTNY","ASHANTI","ANISHA","ALEEN","ADAH","YASUKO","WINTER","VIKI",
"VALRIE","TONA","TINISHA","THI","TERISA","TATUM","TANEKA","SIMONNE",
"SHALANDA","SERITA","RESSIE","REFUGIA","PAZ","OLENE","NA","MERRILL","MARGHERITA",
"MANDIE","MAN","MAIRE","LYNDIA","LUCI","LORRIANE","LORETA","LEONIA",
"LAVONA","LASHAWNDA","LAKIA","KYOKO","KRYSTINA","KRYSTEN","KENIA","KELSI",
"JUDE","JEANICE","ISOBEL","GEORGIANN","GENNY","FELICIDAD",
"EILENE","DEON","DELOISE","DEEDEE","DANNIE","CONCEPTION","CLORA","CHERILYN","CHANG",
"CALANDRA","BERRY","ARMANDINA","ANISA","ULA","TIMOTHY","TIERA",
"THERESSA","STEPHANIA","SIMA","SHYLA","SHONTA","SHERA","SHAQUITA","SHALA","SAMMY",
"ROSSANA","NOHEMI","NERY","MORIAH","MELITA","MELIDA","MELANI",
"MARYLYNN","MARISHA","MARIETTE","MALORIE","MADELENE","LUDIVINA","LORIA","LORETTE",
"LORALEE","LIANNE","LEON","LAVENIA","LAURINDA","LASHON","KIT","KIMI",
"KEILA","KATELYNN","KAI","JONE","JOANE","JI","JAYNA","JANELLA","JA","HUE",
"HERTHA","FRANCENE","ELINORE","DESPINA","DELSIE","DEEDRA","CLEMENCIA",
"CARRY","CAROLIN","CARLOS","BULAH","BRITTANIE","BOK","BLONDELL","BIBI",
"BEAULAH","BEATA","ANNITA","AGRIPINA","VIRGEN","VALENE","UN","TWANDA",
"TOMMYE","TOI","TARRA","TARI","TAMMERA","SHAKIA","SADYE","RUTHANNE","ROCHEL",
"RIVKA","PURA","NENITA","NATISHA","MING","MERRILEE","MELODEE","MARVIS",
"LUCILLA","LEENA","LAVETA","LARITA","LANIE","KEREN","ILEEN","GEORGEANN",
"GENNA","GENESIS","FRIDA","EWA","EUFEMIA","EMELY","ELA","EDYTH","DEONNA",
"DEADRA","DARLENA","CHANELL","CHAN","CATHERN","CASSONDRA","CASSAUNDRA","BERNARDA",
"BERNA","ARLINDA","ANAMARIA","ALBERT","WESLEY","VERTIE","VALERI","TORRI",
"TATYANA","STASIA","SHERISE","SHERILL","SEASON","SCOTTIE","SANDA","RUTHE","ROSY",
"ROBERTO","ROBBI","RANEE","QUYEN","PEARLY","PALMIRA","ONITA","NISHA",
"NIESHA","NIDA","NEVADA","NAM","MERLYN","MAYOLA","MARYLOUISE","MARYLAND","MARX","MARTH",
"MARGENE","MADELAINE","LONDA","LEONTINE","LEOMA","LEIA","LAWRENCE",
"LAURALEE","LANORA","LAKITA","KIYOKO","KETURAH","KATELIN","KAREEN","JONIE","JOHNETTE","JENEE",
"JEANETT","IZETTA","HIEDI","HEIKE","HASSIE","HAROLD","GIUSEPPINA","GEORGANN",
"FIDELA","FERNANDE","ELWANDA","ELLAMAE","ELIZ","DUSTI","DOTTY","CYNDY",
"CORALIE","CELESTA","ARGENTINA","ALVERTA","XENIA","WAVA","VANETTA","TORRIE",
"TASHINA","TANDY","TAMBRA","TAMA","STEPANIE","SHILA","SHAUNTA","SHARAN",
"SHANIQUA","SHAE","SETSUKO","SERAFINA","SANDEE","ROSAMARIA","PRISCILA",
"OLINDA","NADENE","MUOI","MICHELINA","MERCEDEZ","MARYROSE","MARIN","MARCENE","MAO",
"MAGALI","MAFALDA","LOGAN","LINN","LANNIE","KAYCE","KAROLINE",
"KAMILAH","KAMALA","JUSTA","JOLINE","JENNINE","JACQUETTA","IRAIDA","GERALD","GEORGEANNA",
"FRANCHESCA","FAIRY","EMELINE","ELANE","EHTEL","EARLIE","DULCIE",
"DALENE","CRIS","CLASSIE","CHERE","CHARIS","CAROYLN","CARMINA","CARITA","BRIAN","BETHANIE",
"AYAKO","ARICA","AN","ALYSA","ALESSANDRA","AKILAH","ADRIEN","ZETTA",
"YOULANDA","YELENA","YAHAIRA","XUAN","WENDOLYN","VICTOR","TIJUANA","TERRELL","TERINA",
"TERESIA","SUZI","SUNDAY","SHERELL","SHAVONDA","SHAUNTE","SHARDA",
"SHAKITA","SENA","RYANN","RUBI","RIVA","REGINIA","REA","RACHAL","PARTHENIA","PAMULA",
"MONNIE","MONET","MICHAELE","MELIA","MARINE","MALKA","MAISHA",
"LISANDRA","LEO","LEKISHA","LEAN","LAURENCE","LAKENDRA",
"KRYSTIN","KORTNEY","KIZZIE","KITTIE",
"KERA","KENDAL","KEMBERLY","KANISHA","JULENE","JULE",
"JOSHUA","JOHANNE","JEFFREY","JAMEE","HAN","HALLEY","GIDGET",
"GALINA","FREDRICKA","FLETA","FATIMAH",
"EUSEBIA","ELZA","ELEONORE","DORTHEY","DORIA","DONELLA","DINORAH",
"DELORSE","CLARETHA","CHRISTINIA","CHARLYN","BONG",
"BELKIS","AZZIE","ANDERA","AIKO","ADENA",
"YER","YAJAIRA","WAN","VANIA","ULRIKE","TOSHIA","TIFANY","STEFANY",
"SHIZUE","SHENIKA","SHAWANNA","SHAROLYN","SHARILYN",
"SHAQUANA","SHANTAY","SEE","ROZANNE","ROSELEE","RICKIE","REMONA","REANNA",
"RAELENE","QUINN","PHUNG","PETRONILA","NATACHA","NANCEY","MYRL",
"MIYOKO","MIESHA","MERIDETH","MARVELLA","MARQUITTA",
"MARHTA","MARCHELLE","LIZETH","LIBBIE","LAHOMA","LADAWN","KINA","KATHELEEN",
"KATHARYN","KARISA","KALEIGH","JUNIE","JULIEANN","JOHNSIE",
"JANEAN","JAIMEE","JACKQUELINE","HISAKO","HERMA","HELAINE",
"GWYNETH","GLENN","GITA","EUSTOLIA","EMELINA","ELIN","EDRIS","DONNETTE",
"DONNETTA","DIERDRE","DENAE","DARCEL","CLAUDE","CLARISA","CINDERELLA","CHIA",
"CHARLESETTA","CHARITA","CELSA","CASSY","CASSI","CARLEE","BRUNA",
"BRITTANEY","BRANDE","BILLI","BAO","ANTONETTA","ANGLA","ANGELYN",
"ANALISA","ALANE","WENONA","WENDIE","VERONIQUE","VANNESA","TOBIE",
"TEMPIE","SUMIKO","SULEMA","SPARKLE",
"SOMER","SHEBA","SHAYNE","SHARICE","SHANEL","SHALON","SAGE",
"ROY","ROSIO","ROSELIA","RENAY","REMA","REENA","PORSCHE","PING",
"PEG","OZIE","ORETHA","ORALEE","ODA","NU","NGAN",
"NAKESHA","MILLY","MARYBELLE","MARLIN","MARIS",
"MARGRETT","MARAGARET","MANIE","LURLENE","LILLIA","LIESELOTTE",
"LAVELLE","LASHAUNDA","LAKEESHA","KEITH","KAYCEE",
"KALYN","JOYA","JOETTE","JENAE","JANIECE",
"ILLA","GRISEL","GLAYDS","GENEVIE","GALA","FREDDA","FRED","ELMER","ELEONOR","DEBERA",
"DEANDREA","DAN","CORRINNE","CORDIA","CONTESSA",
"COLENE","CLEOTILDE","CHARLOTT","CHANTAY","CECILLE","BEATRIS","AZALEE","ARLEAN","ARDATH",
"ANJELICA","ANJA","ALFREDIA","ALEISHA","ADAM","ZADA","YUONNE","XIAO","WILLODEAN","WHITLEY",
"VENNIE","VANNA","TYISHA","TOVA","TORIE","TONISHA","TILDA",
"TIEN","TEMPLE","SIRENA","SHERRIL","SHANTI","SHAN","SENAIDA",
"SAMELLA","ROBBYN","RENDA","REITA",
"PHEBE","PAULITA","NOBUKO","NGUYET","NEOMI","MOON","MIKAELA",
"MELANIA","MAXIMINA","MARG","MAISIE",
"LYNNA","LILLI","LAYNE","LASHAUN","LAKENYA","LAEL","KIRSTIE","KATHLINE","KASHA",
"KARLYN","KARIMA","JOVAN","JOSEFINE",
"JENNELL","JACQUI","JACKELYN","HYO","HIEN","GRAZYNA","FLORRIE","FLORIA",
"ELEONORA","DWANA","DORLA","DONG","DELMY","DEJA","DEDE","DANN",
"CRYSTA","CLELIA","CLARIS","CLARENCE","CHIEKO","CHERLYN","CHERELLE",
"CHARMAIN","CHARA","CAMMY","BEE","ARNETTE","ARDELLE","ANNIKA","AMIEE",
"AMEE","ALLENA","YVONE","YUKI","YOSHIE","YEVETTE","YAEL","WILLETTA",
"VONCILE","VENETTA","TULA","TONETTE","TIMIKA","TEMIKA","TELMA","TEISHA","TAREN","TA",
"STACEE","SHIN","SHAWNTA","SATURNINA",
"RICARDA","POK","PASTY","ONIE","NUBIA","MORA","MIKE","MARIELLE","MARIELLA","MARIANELA",
"MARDELL","MANY","LUANNA","LOISE","LISABETH","LINDSY","LILLIANA",
"LILLIAM","LELAH","LEIGHA","LEANORA","LANG",
"KRISTEEN","KHALILAH","KEELEY","KANDRA","JUNKO","JOAQUINA",
"JERLENE","JANI","JAMIKA","JAME","HSIU",
"HERMILA","GOLDEN","GENEVIVE","EVIA","EUGENA","EMMALINE","ELFREDA","ELENE","DONETTE",
"DELCIE","DEEANNA","DARCEY","CUC","CLARINDA","CIRA","CHAE","CELINDA","CATHERYN","CATHERIN",
"CASIMIRA","CARMELIA","CAMELLIA","BREANA","BOBETTE","BERNARDINA","BEBE","BASILIA","ARLYNE",
"AMAL","ALAYNA","ZONIA","ZENIA","YURIKO","YAEKO","WYNELL","WILLOW","WILLENA","VERNIA",
"TU","TRAVIS","TORA","TERRILYN","TERICA","TENESHA","TAWNA","TAJUANA","TAINA",
"STEPHNIE","SONA","SOL","SINA","SHONDRA",
"SHIZUKO","SHERLENE","SHERICE","SHARIKA","ROSSIE","ROSENA","RORY","RIMA","RIA",
"RHEBA","RENNA","PETER","NATALYA","NANCEE","MELODI","MEDA",
"MAXIMA","MATHA","MARKETTA","MARICRUZ",
"MARCELENE","MALVINA","LUBA","LOUETTA","LEIDA","LECIA","LAURAN","LASHAWNA","LAINE",
"KHADIJAH","KATERINE","KASI","KALLIE","JULIETTA","JESUSITA","JESTINE",
"JESSIA","JEREMY","JEFFIE","JANYCE","ISADORA","GEORGIANNE","FIDELIA","EVITA",
"EURA","EULAH","ESTEFANA","ELSY","ELIZABET","ELADIA","DODIE","DION","DIA",
"DENISSE","DELORAS","DELILA","DAYSI","DAKOTA","CURTIS","CRYSTLE","CONCHA","COLBY","CLARETTA",
"CHU","CHRISTIA","CHARLSIE","CHARLENA","CARYLON","BETTYANN","ASLEY","ASHLEA",
"AMIRA","AI","AGUEDA","AGNUS","YUETTE","VINITA",
"VICTORINA","TYNISHA","TREENA","TOCCARA","TISH","THOMASENA","TEGAN","SOILA",
"SHILOH","SHENNA","SHARMAINE","SHANTAE","SHANDI",
"SEPTEMBER","SARAN","SARAI","SANA","SAMUEL",
"SALLEY","ROSETTE","ROLANDE","REGINE","OTELIA","OSCAR","OLEVIA","NICHOLLE",
"NECOLE","NAIDA","MYRTA","MYESHA","MITSUE","MINTA","MERTIE","MARGY","MAHALIA","MADALENE",
"LOVE","LOURA","LOREAN","LEWIS","LESHA","LEONIDA","LENITA",
"LAVONE","LASHELL","LASHANDRA","LAMONICA","KIMBRA","KATHERINA",
"KARRY","KANESHA","JULIO","JONG","JENEVA",
"JAQUELYN","HWA","GILMA","GHISLAINE","GERTRUDIS","FRANSISCA","FERMINA","ETTIE",
"ETSUKO","ELLIS","ELLAN","ELIDIA","EDRA","DORETHEA",
"DOREATHA","DENYSE","DENNY","DEETTA","DAINE","CYRSTAL",
"CORRIN","CAYLA","CARLITA","CAMILA","BURMA","BULA","BUENA",
"BLAKE","BARABARA","AVRIL","AUSTIN","ALAINE",
"ZANA","WILHEMINA","WANETTA","VIRGIL","VI","VERONIKA",
"VERNON","VERLINE","VASILIKI","TONITA","TISA","TEOFILA","TAYNA",
"TAUNYA","TANDRA","TAKAKO","SUNNI","SUANNE",
"SIXTA","SHARELL","SEEMA","RUSSELL","ROSENDA","ROBENA","RAYMONDE",
"PEI","PAMILA","OZELL","NEIDA","NEELY","MISTIE","MICHA",
"MERISSA","MAURITA","MARYLN","MARYETTA",
"MARSHALL","MARCELL","MALENA","MAKEDA","MADDIE","LOVETTA","LOURIE",
"LORRINE","LORILEE","LESTER","LAURENA","LASHAY","LARRAINE",
"LAREE","LACRESHA","KRISTLE","KRISHNA",
"KEVA","KEIRA","KAROLE","JOIE","JINNY","JEANNETTA","JAMA","HEIDY",
"GILBERTE","GEMA","FAVIOLA","EVELYNN","ENDA","ELLI","ELLENA","DIVINA",
"DAGNY","COLLENE","CODI","CINDIE",
"CHASSIDY","CHASIDY","CATRICE","CATHERINA","CASSEY","CAROLL","CARLENA","CANDRA",
"CALISTA","BRYANNA","BRITTENY","BEULA","BARI","AUDRIE","AUDRIA","ARDELIA",
"ANNELLE","ANGILA","ALONA","ALLYN","DOUGLAS",
"ROGER","JONATHAN","RALPH","NICHOLAS","BENJAMIN","BRUCE","HARRY","WAYNE",
"STEVE","HOWARD","ERNEST","PHILLIP","TODD","CRAIG","ALAN","PHILIP","EARL","DANNY","BRYAN",
"STANLEY","LEONARD","NATHAN","MANUEL","RODNEY","MARVIN","VINCENT","JEFFERY",
"JEFF","CHAD","JACOB","ALFRED","BRADLEY","HERBERT","FREDERICK","EDWIN","DON","RICKY",
"RANDALL","BARRY","BERNARD","LEROY","MARCUS","THEODORE","CLIFFORD","MIGUEL",
"JIM","TOM","CALVIN","BILL","LLOYD","DEREK","WARREN","DARRELL","JEROME","FLOYD","ALVIN",
"TIM","GORDON","GREG","JORGE","DUSTIN","PEDRO","DERRICK","ZACHARY","HERMAN",
"GLEN","HECTOR","RICARDO","RICK","BRENT","RAMON","GILBERT","MARC","REGINALD",
"RUBEN","NATHANIEL","RAFAEL","EDGAR","MILTON","RAUL","BEN",
"CHESTER","DUANE","FRANKLIN","BRAD","RON","ROLAND","ARNOLD","HARVEY",
"JARED","ERIK","DARRYL","NEIL","JAVIER","FERNANDO","CLINTON","TED","MATHEW","TYRONE",
"DARREN","LANCE","KURT","ALLAN","NELSON","GUY","CLAYTON","HUGH",
"MAX","DWAYNE","DWIGHT","ARMANDO","FELIX","EVERETT","IAN",
"WALLACE","KEN","BOB","ALFREDO",
"ALBERTO","DAVE","IVAN","BYRON","ISAAC","MORRIS","CLIFTON","WILLARD","ROSS",
"ANDY","SALVADOR","KIRK","SERGIO","SETH","KENT","TERRANCE","EDUARDO",
"TERRENCE","ENRIQUE","WADE","STUART","FREDRICK","ARTURO",
"ALEJANDRO","NICK","LUTHER","WENDELL","JEREMIAH",
"JULIUS","OTIS","TREVOR","OLIVER","LUKE","HOMER","GERARD","DOUG",
"KENNY","HUBERT","LYLE","MATT","ALFONSO","ORLANDO","REX","CARLTON","ERNESTO",
"NEAL","PABLO","LORENZO","OMAR","WILBUR","GRANT","HORACE",
"RODERICK","ABRAHAM","WILLIS","RICKEY","ANDRES","CESAR","JOHNATHAN",
"MALCOLM","RUDOLPH","DAMON","KELVIN",
"PRESTON","ALTON","ARCHIE","MARCO","WM","PETE","RANDOLPH",
"GARRY","GEOFFREY","JONATHON","FELIPE","GERARDO","ED","DOMINIC","DELBERT",
"COLIN","GUILLERMO","EARNEST","LUCAS","BENNY","SPENCER",
"RODOLFO","MYRON","EDMUND","GARRETT","SALVATORE",
"CEDRIC","LOWELL","GREGG","SHERMAN","WILSON",
"SYLVESTER","ROOSEVELT","ISRAEL","JERMAINE","FORREST",
"WILBERT","LELAND","SIMON","CLARK","IRVING","BRYANT",
"OWEN","RUFUS","WOODROW","KRISTOPHER","MACK",
"LEVI","MARCOS","GUSTAVO","JAKE","LIONEL","GILBERTO","CLINT","NICOLAS",
"ISMAEL","ORVILLE","ERVIN","DEWEY","AL","WILFRED","JOSH","HUGO","IGNACIO",
"CALEB","TOMAS","SHELDON","ERICK","STEWART","DOYLE",
"DARREL","ROGELIO","TERENCE","SANTIAGO","ALONZO","ELIAS",
"BERT","ELBERT","RAMIRO","CONRAD","NOAH","GRADY","PHIL",
"CORNELIUS","LAMAR","ROLANDO","CLAY",
"PERCY","DEXTER","BRADFORD","DARIN","AMOS","MOSES",
"IRVIN","SAUL","ROMAN","RANDAL","TIMMY","DARRIN","WINSTON",
"BRENDAN","ABEL","DOMINICK","BOYD","EMILIO","ELIJAH","DOMINGO",
"EMMETT","MARLON","EMANUEL","JERALD","EDMOND","EMIL","DEWAYNE","WILL","OTTO",
"TEDDY","REYNALDO","BRET","JESS","TRENT","HUMBERTO","EMMANUEL",
"STEPHAN","VICENTE","LAMONT","GARLAND","MILES",
"EFRAIN","HEATH","RODGER","HARLEY","ETHAN","ELDON","ROCKY",
"PIERRE","JUNIOR","FREDDY","ELI","BRYCE","ANTOINE",
"STERLING","CHASE","GROVER","ELTON","CLEVELAND","DYLAN",
"CHUCK","DAMIAN","REUBEN","STAN","AUGUST","LEONARDO","JASPER",
"RUSSEL","ERWIN","BENITO","HANS","MONTE","BLAINE","ERNIE",
"CURT","QUENTIN","AGUSTIN","MURRAY","JAMAL","ADOLFO",
"HARRISON","TYSON","BURTON","BRADY","ELLIOTT","WILFREDO",
"BART","JARROD","VANCE","DENIS","DAMIEN","JOAQUIN",
"HARLAN","DESMOND","ELLIOT","DARWIN","GREGORIO",
"BUDDY","XAVIER","KERMIT","ROSCOE","ESTEBAN","ANTON",
"SOLOMON","SCOTTY","NORBERT","ELVIN","WILLIAMS","NOLAN",
"ROD","QUINTON","HAL","BRAIN","ROB","ELWOOD","KENDRICK",
"DARIUS","MOISES","FIDEL","THADDEUS","CLIFF","MARCEL","JACKSON",
"RAPHAEL","BRYON","ARMAND","ALVARO",
"JEFFRY","DANE","JOESPH","THURMAN","NED","RUSTY","MONTY",
"FABIAN","REGGIE","MASON","GRAHAM","ISAIAH","VAUGHN","GUS","LOYD","DIEGO","ADOLPH",
"NORRIS","MILLARD","ROCCO","GONZALO","DERICK","RODRIGO","WILEY",
"RIGOBERTO","ALPHONSO","TY","NOE","VERN","REED",
"JEFFERSON","ELVIS","BERNARDO","MAURICIO","HIRAM",
"DONOVAN","BASIL","RILEY","NICKOLAS","MAYNARD","SCOT","VINCE",
"QUINCY","EDDY","SEBASTIAN","FEDERICO",
"ULYSSES","HERIBERTO","DONNELL","COLE","DAVIS","GAVIN","EMERY","WARD","ROMEO",
"JAYSON","DANTE","CLEMENT","COY","MAXWELL","JARVIS","BRUNO",
"ISSAC","DUDLEY","BROCK","SANFORD","CARMELO",
"BARNEY","NESTOR","STEFAN","DONNY","ART","LINWOOD","BEAU",
"WELDON","GALEN","ISIDRO","TRUMAN","DELMAR",
"JOHNATHON","SILAS","FREDERIC","DICK","IRWIN","MERLIN",
"CHARLEY","MARCELINO","HARRIS","CARLO","TRENTON","KURTIS","HUNTER","AURELIO","WINFRED",
"VITO","COLLIN","DENVER","CARTER","LEONEL","EMORY","PASQUALE",
"MOHAMMAD","MARIANO","DANIAL","LANDON",
"DIRK","BRANDEN","ADAN","BUFORD","GERMAN","WILMER","EMERSON","ZACHERY",
"FLETCHER","JACQUES","ERROL","DALTON","MONROE","JOSUE","EDWARDO","BOOKER","WILFORD",
"SONNY","SHELTON","CARSON","THERON","RAYMUNDO","DAREN","HOUSTON",
"ROBBY","LINCOLN","GENARO","BENNETT","OCTAVIO","CORNELL","HUNG","ARRON","ANTONY",
"HERSCHEL","GIOVANNI","GARTH","CYRUS","CYRIL","RONNY","LON",
"FREEMAN","DUNCAN","KENNITH","CARMINE","ERICH","CHADWICK","WILBURN","RUSS","REID","MYLES",
"ANDERSON","MORTON","JONAS","FOREST","MITCHEL","MERVIN","ZANE","RICH",
"JAMEL","LAZARO","ALPHONSE","RANDELL","MAJOR","JARRETT","BROOKS","ABDUL","LUCIANO",
"SEYMOUR","EUGENIO","MOHAMMED","VALENTIN","CHANCE","ARNULFO","LUCIEN",
"FERDINAND","THAD","EZRA","ALDO","RUBIN","ROYAL","MITCH","EARLE","ABE",
"WYATT","MARQUIS","LANNY","KAREEM","JAMAR","BORIS","ISIAH","EMILE","ELMO","ARON",
"LEOPOLDO","EVERETTE","JOSEF","ELOY","RODRICK","REINALDO",
"LUCIO","JERROD","WESTON","HERSHEL",
"BARTON","PARKER","LEMUEL","BURT","JULES","GIL","ELISEO","AHMAD","NIGEL",
"EFREN","ANTWAN","ALDEN","MARGARITO","COLEMAN",
"DINO","OSVALDO","LES","DEANDRE","NORMAND","KIETH","TREY","NORBERTO",
"NAPOLEON","JEROLD","FRITZ","ROSENDO",
"MILFORD","CHRISTOPER","ALFONZO","LYMAN","JOSIAH","BRANT","WILTON","RICO",
"JAMAAL","DEWITT","BRENTON",
"OLIN","FOSTER","FAUSTINO","CLAUDIO","JUDSON","GINO","EDGARDO","ALEC","TANNER",
"JARRED","DONN","TAD","PRINCE","PORFIRIO","ODIS","LENARD","CHAUNCEY","TOD","MEL",
"MARCELO","KORY","AUGUSTUS","KEVEN","HILARIO","BUD","SAL","ORVAL","MAURO","ZACHARIAH",
"OLEN","ANIBAL","MILO","JED","DILLON","AMADO","NEWTON",
"LENNY","RICHIE","HORACIO","BRICE","MOHAMED",
"DELMER","DARIO","REYES","MAC","JONAH","JERROLD","ROBT","HANK","RUPERT","ROLLAND",
"KENTON","DAMION","ANTONE","WALDO","FREDRIC","BRADLY","KIP","BURL","WALKER",
"TYREE","JEFFEREY","AHMED","WILLY","STANFORD","OREN",
"NOBLE","MOSHE","MIKEL","ENOCH","BRENDON",
"QUINTIN","JAMISON","FLORENCIO","DARRICK","TOBIAS",
"HASSAN","GIUSEPPE","DEMARCUS","CLETUS","TYRELL","LYNDON",
"KEENAN","WERNER","GERALDO","COLUMBUS","CHET","BERTRAM",
"MARKUS","HUEY","HILTON","DWAIN","DONTE","TYRON",
"OMER","ISAIAS","HIPOLITO","FERMIN",
"ADALBERTO","BO","BARRETT","TEODORO","MCKINLEY",
"MAXIMO","GARFIELD","RALEIGH","LAWERENCE",
"ABRAM","RASHAD","KING","EMMITT","DARON","SAMUAL","MIQUEL",
"EUSEBIO","DOMENIC","DARRON","BUSTER","WILBER","RENATO","JC","HOYT","HAYWOOD",
"EZEKIEL","CHAS","FLORENTINO","ELROY","CLEMENTE","ARDEN",
"NEVILLE","EDISON","DESHAWN",
"NATHANIAL","JORDON","DANILO","CLAUD","SHERWOOD","RAYMON",
"RAYFORD","CRISTOBAL","AMBROSE","TITUS","HYMAN","FELTON",
"EZEQUIEL","ERASMO","STANTON",
"LONNY","LEN","IKE","MILAN","LINO","JAROD","HERB","ANDREAS",
"WALTON","RHETT","PALMER","DOUGLASS","CORDELL","OSWALDO",
"ELLSWORTH","VIRGILIO","TONEY",
"NATHANAEL","DEL","BENEDICT","MOSE","JOHNSON","ISREAL","GARRET",
"FAUSTO","ASA","ARLEN","ZACK","WARNER","MODESTO",
"FRANCESCO","MANUAL","GAYLORD",
"GASTON","FILIBERTO","DEANGELO","MICHALE","GRANVILLE","WES",
"MALIK","ZACKARY","TUAN","ELDRIDGE","CRISTOPHER","CORTEZ","ANTIONE",
"MALCOM","LONG","KOREY","JOSPEH","COLTON","WAYLON","VON","HOSEA","SHAD",
"SANTO","RUDOLF","ROLF","REY","RENALDO","MARCELLUS","LUCIUS",
"KRISTOFER","BOYCE","BENTON","HAYDEN","HARLAND",
"ARNOLDO","RUEBEN","LEANDRO","KRAIG","JERRELL","JEROMY","HOBERT","CEDRICK",
"ARLIE","WINFORD","WALLY","LUIGI","KENETH","JACINTO","GRAIG","FRANKLYN",
"EDMUNDO","SID","PORTER","LEIF","JERAMY","BUCK","WILLIAN", "VINCENZO",
"SHON","LYNWOOD","JERE","HAI","ELDEN","DORSEY","DARELL","BRODERICK","ALONSO"};

static void swap22(char *a, char *b)
{   char c;
    for (uint8_t i = 0; i < 50; i++) c = a[i], a[i] = b[i], b[i] = c;
}

static void bubbleSort22()
{   uint16_t i, j;
    for (i = 0; i < 5163 - 1; i++)
        for (j = 0; j < 5163 - i - 1; j++)
            if (strcmp(names22[j], names22[j + 1]) > 0)
                swap22(&names22[j][0], &names22[j + 1][0]);
}

static constexpr uint8_t letterwaarde(uint8_t c)
{   return c > 64 ? c - 64 : c;
}

static uint32_t opdracht22()
{   bubbleSort22();
    uint32_t total = 0;
    for (uint16_t i = 0; i < 5163; i++)
    {   uint32_t score = 0;
        for (uint8_t j = 0; j < 50; j++)
            score += letterwaarde(names22[i][j]);
        score = score * (i + 1);
        total += score;
    }
    return total;
}

/*
#23 Non-abundant sums

A perfect number is a number for which the sum of its proper divisors is
exactly equal to the number. For example, the sum of the proper divisors
of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

A number n is called deficient if the sum of its proper divisors
is less than n and it is called abundant if this sum exceeds n.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest
number that can be written as the sum of two abundant numbers is 24. By
mathematical analysis, it can be shown that all integers greater than 28123
can be written as the sum of two abundant numbers. However, this upper limit
cannot be reduced any further by analysis even though it is known that the
greatest number that cannot be expressed as the sum of two abundant numbers
is less than this limit.

Find the sum of all the positive integers which
cannot be written as the sum of two abundant numbers.

Antwoord: 4,179,871
*/

static uint16_t divsum(uint32_t n)
{   uint16_t xsum = 0;
    for (uint32_t i = 1; i <= n / 2; i++)
        if (n % i == 0) xsum += i;
    return xsum;
}

static bool find23(vector<uint16_t> &d, uint16_t n)
{   return binary_search(d.begin(), d.end(), n);
}

static uint32_t opdracht23()
{   uint16_t xmax = 28123;
    vector<uint16_t> abundants;
    for (uint16_t i = 1; i <= xmax; i++)
        if (divsum(i) > i)
            abundants.push_back(i);
    uint32_t xsum = 1;
    for (uint16_t i = 2; i <= xmax; i++)
    {   bool boo = true;
        for (auto x : abundants)
        {   if (x < i)
            {   if (find23(abundants, i - x))
                {   boo = false;
                    break;
                }
            } else break;
        }
        if (boo == true) xsum += i;
    }
    return xsum;
}

/*
#24: Lexicographic permutations

A permutation is an ordered arrangement of objects. For example, 3124 is
one possible permutation of the digits 1, 2, 3 and 4. If all of the
permutations are listed numerically or alphabetically, we call it
lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

012   021   102   120   201   210

What is the millionth lexicographic permutation
of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

Antwoord: 2,783,915,460
*/

static uint32_t concat24(vector <uint8_t> &v)
{   uint32_t ret = 0;
    uint8_t last = v.size() - 1;
    for (uint8_t i = 0; i <= last; i++)
        ret += v.at(last - i) * myPow<uint32_t>(10, i);
    return ret;
}

static uint32_t opdracht24()
{   uint8_t a[] = {0,1,2,3,4,5,6,7,8,9};
    vector<uint8_t> b;
    vector<uint8_t> result;
    uint32_t perm = 999999;
    for (uint8_t i = 0; i < 10; i++)
        b.push_back(a[i]);
    while (b.size() > 0)
    {   uint8_t i = perm / fac32(b.size() - 1);
        perm = perm % fac32(b.size() - 1);
        result.push_back(b.at(i));
        b.erase(b.begin() + i);
    }
    return concat24(result);
}

/*
#25: 1000-digit Fibonacci number

The Fibonacci sequence is defined by the recurrence relation:

    Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.

Hence the first 12 terms will be:

    F1 = 1
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 5
    F6 = 8
    F7 = 13
    F8 = 21
    F9 = 34
    F10 = 55
    F11 = 89
    F12 = 144

The 12th term, F12, is the first term to contain three digits.

What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

Antwoord: 4,782
*/

class LongNumber25
{   uint8_t _buf[1500] = {0};
public:
    void clear() { memset(_buf, 0, sizeof(_buf)); }
    uint8_t decimal(uint16_t i) const { return _buf[i]; }
    void add(LongNumber25 &n);
    void set(uint64_t n);
    void set(LongNumber25 n);
    void dump(ostream &os) const;
    uint16_t digits() const;
};

void LongNumber25::set(LongNumber25 n)
{   for (uint16_t i = 0; i < 1500; i++)
        _buf[i] = n.decimal(i);
}

void LongNumber25::dump(ostream &os) const
{   for (uint16_t i = digits(); i > 0; i--)
        os << (uint16_t)_buf[i - 1];
}

uint16_t LongNumber25::digits() const
{   uint16_t i;
    for (i = 1500; i > 0; i--)
        if (_buf[i - 1] > 0)
            return i;
    return 1;
}

void LongNumber25::set(uint64_t n)
{   memset(_buf, 0, sizeof(_buf));
    for (uint16_t i = 0; n > 0; i++)
        _buf[i] = n % 10, n = n / 10;
}

void LongNumber25::add(LongNumber25 &n)
{   uint8_t carry = 0;
    for (uint16_t i = 0; i < 1500; i++)
    {   _buf[i] += carry + n.decimal(i);
        carry = _buf[i] / 10;
        _buf[i] = _buf[i] % 10;
    }
}

uint32_t opdracht25()
{   uint8_t i = 0;
    uint16_t cnt = 2;
    LongNumber25 fib[3];
    fib[0].set(1);
    fib[1].set(0);
    fib[2].set(1);
    while (fib[i].digits() < 1000)
    {   i = (i + 1) % 3;
        cnt++;
        LongNumber25 tmp;
        tmp.set(fib[(i + 1) % 3]);
        tmp.add(fib[(i + 2) % 3]);
        fib[i].set(tmp);
    }
    return cnt;
}

/*
#26: Reciprocal cycles

A unit fraction contains 1 in the numerator. The decimal representation
of the unit fractions with denominators 2 to 10 are given:

    1/2 =  0.5
    1/3 =  0.(3)
    1/4 =  0.25
    1/5 =  0.2
    1/6 =  0.1(6)
    1/7 =  0.(142857)
    1/8 =  0.125
    1/9 =  0.(1)
    1/10 =  0.1 

Where 0.1(6) means 0.166666..., and has a 1-digit recurring
cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the
longest recurring cycle in its decimal fraction part.

Antwoord: 983
*/

/*
Simpel algoritme om cycle length te bepalen, werkt niet
voor sommige nummers met cycle length 1, dan wordt er
0 teruggegeven. Dit zal de uitkomst van deze opdracht niet veranderen
*/
static uint32_t cycleLength(uint32_t n)
{   uint32_t a = 1, t = 0;
    while (t < n)
    {   a = a * 10 % n, t++;
        if (a == 0) return 0;
        if (a == 1) return t;
    }
    return 0;
}

static uint32_t opdracht26()
{   uint32_t best_n = 0, best_length = 0;
    for (uint32_t i = 999; i > 1; i--)
    {   uint32_t clength = cycleLength(i);
        if (clength > best_length)
        {   best_n = i, best_length = clength;
            if (best_length == i - 1) break;
        }
    }
    return best_n;
}

/*
#27: Quadratic primes

Euler discovered the remarkable quadratic formula:

n^2+n+41

It turns out that the formula will produce 40 primes for the consecutive
integer values 0≤n≤39. However, when n=40,402+40+41=40(40+1)+41 is
divisible by 41, and certainly when n=41,412+41+41

is clearly divisible by 41.

The incredible formula n2−79n+1601
was discovered, which produces 80 primes for the consecutive values 0≤n≤79

. The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

    n^2+an+b

, where |a|<1000 and |b|≤1000

where |n|
is the modulus/absolute value of n
e.g. |11|=11 and |−4|=4

Find the product of the coefficients, a
and b, for the quadratic expression that produces the maximum
number of primes for consecutive values of n, starting with n=0.

Antwoord: -59231
*/

static bool isprime27(uint32_t n)
{   for (uint32_t i = 2; i < n; i++)
        if (n % i == 0) return false;
    return true;
}

static uint32_t opdracht27()
{   int32_t best_a = 0, best_b = 0, best_n = 0;
    for (int32_t a = -999; a < 1000; a++)
    {   for (int32_t b = -1000; b <= 1000; b++)
        {   int32_t n = 0;
            while (isprime27(abs(n * n + a * n + b))) n++;
            if (n > best_n) best_a = a, best_b = b, best_n = n;
        }
    }
    cout << best_a * best_b << "\r\n";
    return 0;
}

/*
#28 Number spiral diagonals

Starting with the number 1 and moving to the right in a
clockwise direction a 5 by 5 spiral is formed as follows:

21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13

It can be verified that the sum of the numbers on the diagonals is 101.

What is the sum of the numbers on the diagonals
in a 1001 by 1001 spiral formed in the same way?

Antwoord: 669,171,001
*/

static uint32_t opdracht28(uint32_t root = 1001)
{   uint32_t xsum = 1;    
    for (uint32_t step = 2, foo = 1; foo < root * root; step += 2)
        for (uint8_t i = 0; i < 4; i++) foo += step, xsum += foo;
    return xsum;
}

/*
#29: Distinct powers

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125

If they are then placed in numerical order, with any repeats
removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

Antwoord: 9,183
*/

static uint32_t myRoot(uint32_t n)
{   for (uint8_t a = 2; a <= 10; a++)
        for (uint32_t e = 1, b = 0; (b = myPow<uint32_t>(a, e)) <= 100; e++)
            if (b == (n & 0xffff0000) >> 16) return a << 16 | e;
    return n;
}

static uint32_t eqpow(uint32_t n)
{   uint32_t root = myRoot(n);
    return (root & 0xffff0000) | (n & 0xffff) * (root & 0xffff);
}

static uint32_t opdracht29()
{   set<uint32_t> st;
    for (uint16_t a = 2; a <= 100; a++)
        for (uint16_t b = 2; b <= 100; b++)
            st.insert(eqpow(a << 16 | b));
    return st.size();
}

/*
#30: Digit fifth powers

Surprisingly there are only three numbers that can
be written as the sum of fourth powers of their digits:

1634 = 1^4 + 6^4 + 3^4 + 4^4
8208 = 8^4 + 2^4 + 0^4 + 8^4
9474 = 9^4 + 4^4 + 7^4 + 4^4

As 1 = 14 is not a sum it is not included.

The sum of these numbers is 1634 + 8208 + 9474 = 19316.

Find the sum of all the numbers that can be written
as the sum of fifth powers of their digits.

Antwoord: 443,839
*/

/*
4,150 + 4,151 + 54,748 + 92,727 + 93,084 + 194,979 = 443,83
*/

bool test30(uint32_t n, uint8_t p)
{   uint32_t xsum = 0, tmp = n;
    while (tmp > 0) xsum += myPow<uint32_t>(tmp % 10, p), tmp = tmp / 10;
    return xsum == n;
}

uint32_t opdracht30(uint8_t p = 5)
{   uint32_t xsum = 0;
    for (uint32_t i = 2; i < 1000000; i++) xsum += test30(i, p) ? i : 0;
    return xsum;
}

/*
#31 Coin sums

In England the currency is made up of pound, P, and pence,
p, and there are eight coins in general circulation:

    1p, 2p, 5p, 10p, 20p, 50p, P1 (100p) and P2 (200p).

It is possible to make £2 in the following way:

    1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p

How many different ways can £2 be made using any number of coins?

Antwoord: 73,682
*/

static uint64_t opdracht31()
{   uint8_t target = 200, coins[] = {1,2,5,10,20,50,100,200};
    uint32_t ways[target + 1] = {0};
    ways[0] = 1;
    for (uint8_t i = 0; i < sizeof(coins); i++)
        for (uint8_t j = coins[i]; j <= target; j++)
            ways[j] += ways[j - coins[i]];
    return ways[target];
}

/*
#32: Pandigital products

We shall say that an n-digit number is pandigital if it makes use of all
the digits 1 to n exactly once; for example, the 5-digit number, 15234,
is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing
multiplicand, multiplier, and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity
can be written as a 1 through 9 pandigital.
HINT: Some products can be obtained in more than one way so be sure to only
include it once in your sum.

Antwoord: 45,228
*/

static void panProducts32(set<uint32_t> &st)
{   for (uint32_t i = 2; i < 60; i++)
    {   uint32_t start = i < 10 ? 1234 : 123;
        for (uint32_t j = start; j < 10000/i; j++)
        {   vector<uint8_t> nset;
            for (uint8_t i = 1; i <= 9; i++) nset.push_back(i);
            if (hasDigitsOnce32(i, nset) == false) continue;
            if (hasDigitsOnce32(j, nset) == false) continue;
            if (hasDigitsOnce32(i * j, nset)  == false) continue;
            st.insert(i*j);
        }
    }
}

static uint32_t opdracht32()
{   set<uint32_t> st;
    panProducts32(st);
    uint32_t xsum = 0;
    for (set<uint32_t>::iterator it = st.begin(); it != st.end(); it++) xsum += *it;
    return xsum;
}

/*
#33: Digit cancelling fractions

The fraction 49/98 is a curious fraction, as an inexperienced
mathematician in attempting to simplify it may incorrectly believe
that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.

We shall consider fractions like, 30/50 = 3/5, to be trivial examples.

There are exactly four non-trivial examples of this type of fraction, less
than one in value, and containing two digits in the numerator and denominator.

If the product of these four fractions is given in its
lowest common terms, find the value of the denominator.

Antwoord: 100
*/

static uint32_t opdracht33()
{   double d = 1;
    for (uint32_t i = 1; i < 10; i++)
    {   for (uint32_t j = 1; j < i; j++)
        {   uint32_t a = 9 * j * i, b = 10 * j - i, q = a / b, r = a % b;
            if (r == 0 && q <= 9)
                d *= i / (double)j;
        }
    }
    return (uint32_t)d;
}

/*
#34: Digit factorials

145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

Find the sum of all numbers which are equal to the sum of the factorial of their digits.

Note: as 1! = 1 and 2! = 2 are not sums they are not included.

Antwoord: 40,730
*/

static uint32_t factorials34[] { 1,1,2,6,24,120,720,5040,40320,362880};

static uint32_t facsumdig34(uint32_t n)
{   uint32_t sum = 0;
    while (n > 0) sum += factorials34[n % 10], n = n / 10;
    return sum;
}

static uint32_t opdracht34()
{   uint32_t totalSum = 0;
    for (uint32_t k = 10; k < factorials34[9] * 7; k++)
        if (facsumdig34(k) == k) totalSum += k;
    return totalSum;
}

/*
#35: Circular primes

The number, 197, is called a circular prime because all rotations
of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?

Antwoord: 55
*/

/*
2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199, 311,
337, 373, 719, 733, 919, 971, 991, 1193, 1931, 3119, 3779, 7793, 7937, 9311,
9377, 11939, 19391, 19937, 37199, 39119, 71993, 91193, 93719, 93911, 99371,
193939, 199933, 319993, 331999, 391939, 393919, 919393, 933199, 939193,
939391, 993319, 999331
*/

static uint32_t rotate(uint32_t n)
{   uint32_t length = decimals32(n), digit = n % 10;
    return n / 10 + digit * myPow<uint32_t>(10, length - 1);
}

static void rotations(vector<uint32_t> &rts, uint32_t n)
{   for (uint8_t i = 0; i < decimals32(n); i++)
    {   n = rotate(n);
        rts.push_back(n);
    }
}

static bool iscircular(uint32_t n, vector<uint32_t> &primes)
{   vector<uint32_t> rts;
    rotations(rts, n);
    for (auto rotation : rts)
        if (binary_search(primes.begin(), primes.end(), rotation) == false) return false;
    return true;
}

static uint32_t opdracht35()
{   vector<uint32_t> primes;
    sieve32(primes, 999999);
    uint32_t ncount = 0;
    for (auto prime : primes)
        if (iscircular(prime, primes))
            ncount++;
    return ncount;
}

/*
#36: Double-base palindromes

The decimal number, 585 = 1001001001_2 (binary), is palindromic in both bases.

Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

(Please note that the palindromic number, in either base, may not include leading zeros.)

Antwoord: 872,187
*/

static uint32_t opdracht36(uint32_t min = 1, uint32_t limit = 1000000)
{   uint32_t xsum = 0;
    for (uint32_t i = min; i < limit; i++)
        if (ispalindrome32(i, 10) && ispalindrome32(i, 2)) xsum += i;
    return xsum;
}

/*
#37: Truncatable primes

The number 3797 has an interesting property. Being prime itself, it is possible
to continuously remove digits from left to right, and remain prime at each
stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both
truncatable from left to right and right to left.

NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

Antwoord: 748,317
*/

/*
23 + 37 + 53 + 73 + 313 + 317 + 373 + 797 + 3,137 + 3,797 + 739,397 = 748,317
*/

static bool isrighttruncatable(uint32_t prime, vector<uint32_t> &primes)
{   while (prime > 10)
    {   prime = prime / 10;
        if (binary_search(primes.begin(), primes.end(), prime) == 0) return false;
    }
    return true;
}

static uint32_t truncate_left(uint32_t n)
{   uint8_t exp = decimals32(n) - 1;
    return n % myPow<uint32_t>(10, exp);
}

static bool islefttruncatable(uint32_t prime, vector<uint32_t> &primes)
{   uint8_t length = decimals32(prime);
    for (uint8_t i = 0; i < length; i++)
    {   if (binary_search(primes.begin(), primes.end(), prime) == 0) return false;
        prime = truncate_left(prime);
    }
    return true;
}

static uint32_t opdracht37()
{   vector<uint32_t> primes;
    sieve32(primes, 999999);
    uint32_t xsum = 0;
    for (auto prime : primes)
    {   if (prime == 2 || prime == 3 || prime == 5 || prime == 7)
            continue;
        if (islefttruncatable(prime, primes) && isrighttruncatable(prime, primes))
            xsum += prime;
    }
    return xsum;
}

/*
#38: Pandigital multiples

Take the number 192 and multiply it by each of 1, 2, and 3:

    192 × 1 = 192
    192 × 2 = 384
    192 × 3 = 576

By concatenating each product we get the 1 to 9 pandigital, 192384576. We
will call 192384576 the concatenated product of 192 and (1,2,3)

The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4,
and 5, giving the pandigital, 918273645, which is the concatenated product
of 9 and (1,2,3,4,5).

What is the largest 1 to 9 pandigital 9-digit number that can be formed as
the concatenated product of an integer with (1,2, ... , n) where n > 1?

Antwoord: 932,718,654
*/

static bool isPandigital(uint32_t n)
{   vector<uint8_t> nset;
    for (uint8_t i = 1; i <= decimals32(n); i++) nset.push_back(i);
    return hasDigitsOnce32(n, nset);
}

static uint32_t opdracht38()
{   for (uint32_t i = 9387; i > 9234; i--)
    {   uint32_t result = 2 * i + i * 100000;
        if (isPandigital(result)) return result;
    }
    return 0;
}

/*
#39: Integer right triangles

If p is the perimeter of a right angle triangle with integral length
sides, {a,b,c}, there are exactly three solutions for p = 120.

{20,48,52}, {24,45,51}, {30,40,50}

For which value of p ≤ 1000, is the number of solutions maximised?

Antwoord: 840
*/

/*
(40, 399, 401),
(56, 390, 394),
(105, 360, 375),
(120, 350, 370),
(140, 336, 364),
(168, 315, 357),
(210, 280, 350),
(240, 252, 348),
(252, 240, 348),
(280, 210, 350),
(315, 168, 357),
(336, 140, 364),
(350, 120, 370),
(360, 105, 375),
(390, 56, 394),
(399, 40, 401)
*/

static uint32_t opdracht39()
{   uint32_t best_p = 0, best_solutions = 0;
    for (uint32_t p = 100; p <= 1000; p += 2)
    {   uint32_t solutions = 0;
        for (uint32_t a = 2; a < p / 3; a++)
            solutions += (p * (p - 2 * a) % (2 * (p - a)) == 0) ? 1 : 0;
        if (solutions > best_solutions) best_solutions = solutions, best_p = p;
    }
    return best_p;
}

/*
#40: Champernowne's constant

An irrational decimal fraction is created by concatenating the positive integers:

0.123456789101112131415161718192021...

It can be seen that the 12th digit of the fractional part is 1.

If dn represents the nth digit of the fractional
part, find the value of the following expression.

d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000

Antwoord: 210
*/

// 1*1*5*3*7*2*1=210

static uint32_t getDigit40(uint32_t i)
{   uint32_t offset = 0, decimals = 1, setLow = 1, setLength = 9;
    for (uint32_t limit = 9; i >= limit; limit += setLength * decimals)
        offset = limit, decimals++, setLow *= 10, setLength *= 10;
    uint32_t n = (i - offset) / decimals + setLow, ind = (i - offset) % decimals;
    for (uint32_t x = 0; x < decimals - (ind + 1); x++) n /= 10;
    return n % 10;
}

static uint32_t opdracht40()
{   uint32_t product = 1;
    for (uint32_t i = 1; i <= 1000000; i *= 10) product *= getDigit40(i - 1);
    return product;
}

/*
#41: Pandigital prime

We shall say that an n-digit number is pandigital if it makes use of all
the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital
and is also prime.

What is the largest n-digit pandigital prime that exists?

Antwoord: 7,652,413
*/

static bool isPandigital41(uint32_t n)
{   vector<uint8_t> nset;
    for (uint8_t i = 1; i <= decimals32(n); i++) nset.push_back(i);
    return hasDigitsOnce32(n, nset);
}

static uint32_t opdracht41()
{   vector<uint32_t> primes;
    sieve32(primes, 7654321);
    uint32_t best = 0;
    for (auto prime : primes)
        if (isPandigital41(prime) && prime > best) best = prime;
    return best;
}

/*
#42: Coded triangle numbers

The nth term of the sequence of triangle numbers is given by,
tn = 1/2n(n+1); so the first ten triangle numbers are:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

By converting each letter in a word to a number corresponding to its
alphabetical position and adding these values we form a word value. For
example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word
value is a triangle number then we shall call the word a triangle word.

Using words.txt (right click and 'Save Link/Target As...'), a 16K text
file containing nearly two-thousand common English words, how many are
triangle words?

Antwoord: 162
*/

static char words42[][100] =
{"A","ABILITY","ABLE","ABOUT","ABOVE","ABSENCE","ABSOLUTELY","ACADEMIC",
"ACCEPT","ACCESS","ACCIDENT","ACCOMPANY","ACCORDING","ACCOUNT",
"ACHIEVE","ACHIEVEMENT","ACID","ACQUIRE","ACROSS","ACT","ACTION",
"ACTIVE","ACTIVITY","ACTUAL","ACTUALLY","ADD","ADDITION","ADDITIONAL",
"ADDRESS","ADMINISTRATION","ADMIT","ADOPT","ADULT","ADVANCE",
"ADVANTAGE","ADVICE","ADVISE","AFFAIR","AFFECT","AFFORD","AFRAID",
"AFTER","AFTERNOON","AFTERWARDS","AGAIN","AGAINST","AGE","AGENCY",
"AGENT","AGO","AGREE","AGREEMENT","AHEAD","AID","AIM","AIR","AIRCRAFT",
"ALL","ALLOW","ALMOST","ALONE","ALONG","ALREADY","ALRIGHT","ALSO",
"ALTERNATIVE","ALTHOUGH","ALWAYS","AMONG","AMONGST","AMOUNT","AN",
"ANALYSIS","ANCIENT","AND","ANIMAL","ANNOUNCE","ANNUAL","ANOTHER",
"ANSWER","ANY","ANYBODY","ANYONE","ANYTHING","ANYWAY","APART","APPARENT",
"APPARENTLY","APPEAL","APPEAR","APPEARANCE","APPLICATION","APPLY",
"APPOINT","APPOINTMENT","APPROACH","APPROPRIATE","APPROVE","AREA",
"ARGUE","ARGUMENT","ARISE","ARM","ARMY","AROUND","ARRANGE","ARRANGEMENT",
"ARRIVE","ART","ARTICLE","ARTIST","AS","ASK","ASPECT","ASSEMBLY","ASSESS",
"ASSESSMENT","ASSET","ASSOCIATE","ASSOCIATION","ASSUME","ASSUMPTION","AT",
"ATMOSPHERE","ATTACH","ATTACK","ATTEMPT","ATTEND","ATTENTION","ATTITUDE",
"ATTRACT","ATTRACTIVE","AUDIENCE","AUTHOR","AUTHORITY","AVAILABLE",
"AVERAGE","AVOID","AWARD","AWARE","AWAY","AYE","BABY","BACK","BACKGROUND",
"BAD","BAG","BALANCE","BALL","BAND","BANK","BAR","BASE","BASIC","BASIS",
"BATTLE","BE","BEAR","BEAT","BEAUTIFUL","BECAUSE","BECOME","BED","BEDROOM",
"BEFORE","BEGIN","BEGINNING","BEHAVIOUR","BEHIND","BELIEF","BELIEVE",
"BELONG","BELOW","BENEATH","BENEFIT","BESIDE","BEST","BETTER","BETWEEN",
"BEYOND","BIG","BILL","BIND","BIRD","BIRTH","BIT","BLACK","BLOCK","BLOOD",
"BLOODY","BLOW","BLUE","BOARD","BOAT","BODY","BONE","BOOK","BORDER",
"BOTH","BOTTLE","BOTTOM","BOX","BOY","BRAIN","BRANCH","BREAK","BREATH",
"BRIDGE","BRIEF","BRIGHT","BRING","BROAD","BROTHER","BUDGET","BUILD",
"BUILDING","BURN","BUS","BUSINESS","BUSY","BUT","BUY","BY","CABINET",
"CALL","CAMPAIGN","CAN","CANDIDATE","CAPABLE","CAPACITY","CAPITAL","CAR",
"CARD","CARE","CAREER","CAREFUL","CAREFULLY","CARRY","CASE","CASH","CAT",
"CATCH","CATEGORY","CAUSE","CELL","CENTRAL","CENTRE","CENTURY","CERTAIN",
"CERTAINLY","CHAIN","CHAIR","CHAIRMAN","CHALLENGE","CHANCE","CHANGE",
"CHANNEL","CHAPTER","CHARACTER","CHARACTERISTIC","CHARGE","CHEAP","CHECK",
"CHEMICAL","CHIEF","CHILD","CHOICE","CHOOSE","CHURCH","CIRCLE",
"CIRCUMSTANCE","CITIZEN","CITY","CIVIL","CLAIM","CLASS","CLEAN","CLEAR",
"CLEARLY","CLIENT","CLIMB","CLOSE","CLOSELY","CLOTHES","CLUB","COAL",
"CODE","COFFEE","COLD","COLLEAGUE","COLLECT","COLLECTION","COLLEGE",
"COLOUR","COMBINATION","COMBINE","COME","COMMENT","COMMERCIAL",
"COMMISSION","COMMIT","COMMITMENT","COMMITTEE","COMMON","COMMUNICATION",
"COMMUNITY","COMPANY","COMPARE","COMPARISON","COMPETITION","COMPLETE",
"COMPLETELY","COMPLEX","COMPONENT","COMPUTER","CONCENTRATE",
"CONCENTRATION","CONCEPT","CONCERN","CONCERNED","CONCLUDE","CONCLUSION",
"CONDITION","CONDUCT","CONFERENCE","CONFIDENCE","CONFIRM","CONFLICT",
"CONGRESS","CONNECT","CONNECTION","CONSEQUENCE","CONSERVATIVE","CONSIDER",
"CONSIDERABLE","CONSIDERATION","CONSIST","CONSTANT","CONSTRUCTION",
"CONSUMER","CONTACT","CONTAIN","CONTENT","CONTEXT","CONTINUE","CONTRACT",
"CONTRAST","CONTRIBUTE","CONTRIBUTION","CONTROL","CONVENTION",
"CONVERSATION","COPY","CORNER","CORPORATE","CORRECT","COS","COST","COULD",
"COUNCIL","COUNT","COUNTRY","COUNTY","COUPLE","COURSE","COURT","COVER",
"CREATE","CREATION","CREDIT","CRIME","CRIMINAL","CRISIS","CRITERION",
"CRITICAL","CRITICISM","CROSS","CROWD","CRY","CULTURAL","CULTURE","CUP",
"CURRENT","CURRENTLY","CURRICULUM","CUSTOMER","CUT","DAMAGE","DANGER",
"DANGEROUS","DARK","DATA","DATE","DAUGHTER","DAY","DEAD","DEAL","DEATH",
"DEBATE","DEBT","DECADE","DECIDE","DECISION","DECLARE","DEEP","DEFENCE",
"DEFENDANT","DEFINE","DEFINITION","DEGREE","DELIVER","DEMAND","DEMOCRATIC",
"DEMONSTRATE","DENY","DEPARTMENT","DEPEND","DEPUTY","DERIVE","DESCRIBE",
"DESCRIPTION","DESIGN","DESIRE","DESK","DESPITE","DESTROY","DETAIL",
"DETAILED","DETERMINE","DEVELOP","DEVELOPMENT","DEVICE","DIE","DIFFERENCE",
"DIFFERENT","DIFFICULT","DIFFICULTY","DINNER","DIRECT","DIRECTION",
"DIRECTLY","DIRECTOR","DISAPPEAR","DISCIPLINE","DISCOVER","DISCUSS",
"DISCUSSION","DISEASE","DISPLAY","DISTANCE","DISTINCTION","DISTRIBUTION",
"DISTRICT","DIVIDE","DIVISION","DO","DOCTOR","DOCUMENT","DOG","DOMESTIC",
"DOOR","DOUBLE","DOUBT","DOWN","DRAW","DRAWING","DREAM","DRESS","DRINK",
"DRIVE","DRIVER","DROP","DRUG","DRY","DUE","DURING","DUTY","EACH","EAR",
"EARLY","EARN","EARTH","EASILY","EAST","EASY","EAT","ECONOMIC","ECONOMY",
"EDGE","EDITOR","EDUCATION","EDUCATIONAL","EFFECT","EFFECTIVE",
"EFFECTIVELY","EFFORT","EGG","EITHER","ELDERLY","ELECTION","ELEMENT",
"ELSE","ELSEWHERE","EMERGE","EMPHASIS","EMPLOY","EMPLOYEE","EMPLOYER",
"EMPLOYMENT","EMPTY","ENABLE","ENCOURAGE","END","ENEMY","ENERGY","ENGINE",
"ENGINEERING","ENJOY","ENOUGH","ENSURE","ENTER","ENTERPRISE","ENTIRE",
"ENTIRELY","ENTITLE","ENTRY","ENVIRONMENT","ENVIRONMENTAL","EQUAL",
"EQUALLY","EQUIPMENT","ERROR","ESCAPE","ESPECIALLY","ESSENTIAL",
"ESTABLISH","ESTABLISHMENT","ESTATE","ESTIMATE","EVEN","EVENING","EVENT",
"EVENTUALLY","EVER","EVERY","EVERYBODY","EVERYONE","EVERYTHING","EVIDENCE",
"EXACTLY","EXAMINATION","EXAMINE","EXAMPLE","EXCELLENT","EXCEPT","EXCHANGE",
"EXECUTIVE","EXERCISE","EXHIBITION","EXIST","EXISTENCE","EXISTING","EXPECT",
"EXPECTATION","EXPENDITURE","EXPENSE","EXPENSIVE","EXPERIENCE","EXPERIMENT",
"EXPERT","EXPLAIN","EXPLANATION","EXPLORE","EXPRESS","EXPRESSION","EXTEND",
"EXTENT","EXTERNAL","EXTRA","EXTREMELY","EYE","FACE","FACILITY","FACT",
"FACTOR","FACTORY","FAIL","FAILURE","FAIR","FAIRLY","FAITH","FALL",
"FAMILIAR","FAMILY","FAMOUS","FAR","FARM","FARMER","FASHION","FAST",
"FATHER","FAVOUR","FEAR","FEATURE","FEE","FEEL","FEELING","FEMALE","FEW",
"FIELD","FIGHT","FIGURE","FILE","FILL","FILM","FINAL","FINALLY","FINANCE",
"FINANCIAL","FIND","FINDING","FINE","FINGER","FINISH","FIRE","FIRM","FIRST",
"FISH","FIT","FIX","FLAT","FLIGHT","FLOOR","FLOW","FLOWER","FLY","FOCUS",
"FOLLOW","FOLLOWING","FOOD","FOOT","FOOTBALL","FOR","FORCE","FOREIGN",
"FOREST","FORGET","FORM","FORMAL","FORMER","FORWARD","FOUNDATION","FREE",
"FREEDOM","FREQUENTLY","FRESH","FRIEND","FROM","FRONT","FRUIT","FUEL",
"FULL","FULLY","FUNCTION","FUND","FUNNY","FURTHER","FUTURE","GAIN","GAME",
"GARDEN","GAS","GATE","GATHER","GENERAL","GENERALLY","GENERATE",
"GENERATION","GENTLEMAN","GET","GIRL","GIVE","GLASS","GO","GOAL","GOD",
"GOLD","GOOD","GOVERNMENT","GRANT","GREAT","GREEN","GREY","GROUND","GROUP",
"GROW","GROWING","GROWTH","GUEST","GUIDE","GUN","HAIR","HALF","HALL","HAND",
"HANDLE","HANG","HAPPEN","HAPPY","HARD","HARDLY","HATE","HAVE","HE","HEAD",
"HEALTH","HEAR","HEART","HEAT","HEAVY","HELL","HELP","HENCE","HER","HERE",
"HERSELF","HIDE","HIGH","HIGHLY","HILL","HIM","HIMSELF","HIS","HISTORICAL",
"HISTORY","HIT","HOLD","HOLE","HOLIDAY","HOME","HOPE","HORSE","HOSPITAL",
"HOT","HOTEL","HOUR","HOUSE","HOUSEHOLD","HOUSING","HOW","HOWEVER","HUGE",
"HUMAN","HURT","HUSBAND","I","IDEA","IDENTIFY","IF","IGNORE","ILLUSTRATE",
"IMAGE","IMAGINE","IMMEDIATE","IMMEDIATELY","IMPACT","IMPLICATION","IMPLY",
"IMPORTANCE","IMPORTANT","IMPOSE","IMPOSSIBLE","IMPRESSION","IMPROVE",
"IMPROVEMENT","IN","INCIDENT","INCLUDE","INCLUDING","INCOME","INCREASE",
"INCREASED","INCREASINGLY","INDEED","INDEPENDENT","INDEX","INDICATE",
"INDIVIDUAL","INDUSTRIAL","INDUSTRY","INFLUENCE","INFORM","INFORMATION",
"INITIAL","INITIATIVE","INJURY","INSIDE","INSIST","INSTANCE","INSTEAD",
"INSTITUTE","INSTITUTION","INSTRUCTION","INSTRUMENT","INSURANCE","INTEND",
"INTENTION","INTEREST","INTERESTED","INTERESTING","INTERNAL",
"INTERNATIONAL","INTERPRETATION","INTERVIEW","INTO","INTRODUCE",
"INTRODUCTION","INVESTIGATE","INVESTIGATION","INVESTMENT","INVITE",
"INVOLVE","IRON","IS","ISLAND","ISSUE","IT","ITEM","ITS","ITSELF","JOB",
"JOIN","JOINT","JOURNEY","JUDGE","JUMP","JUST","JUSTICE","KEEP","KEY","KID",
"KILL","KIND","KING","KITCHEN","KNEE","KNOW","KNOWLEDGE","LABOUR","LACK",
"LADY","LAND","LANGUAGE","LARGE","LARGELY","LAST","LATE","LATER","LATTER",
"LAUGH","LAUNCH","LAW","LAWYER","LAY","LEAD","LEADER","LEADERSHIP",
"LEADING","LEAF","LEAGUE","LEAN","LEARN","LEAST","LEAVE","LEFT","LEG",
"LEGAL","LEGISLATION","LENGTH","LESS","LET","LETTER","LEVEL","LIABILITY",
"LIBERAL","LIBRARY","LIE","LIFE","LIFT","LIGHT","LIKE","LIKELY","LIMIT",
"LIMITED","LINE","LINK","LIP","LIST","LISTEN","LITERATURE","LITTLE","LIVE",
"LIVING","LOAN","LOCAL","LOCATION","LONG","LOOK","LORD","LOSE","LOSS","LOT",
"LOVE","LOVELY","LOW","LUNCH","MACHINE","MAGAZINE","MAIN","MAINLY",
"MAINTAIN","MAJOR","MAJORITY","MAKE","MALE","MAN","MANAGE","MANAGEMENT",
"MANAGER","MANNER","MANY","MAP","MARK","MARKET","MARRIAGE","MARRIED",
"MARRY","MASS","MASTER","MATCH","MATERIAL","MATTER","MAY","MAYBE","ME",
"MEAL","MEAN","MEANING","MEANS","MEANWHILE","MEASURE","MECHANISM","MEDIA",
"MEDICAL","MEET","MEETING","MEMBER","MEMBERSHIP","MEMORY","MENTAL",
"MENTION","MERELY","MESSAGE","METAL","METHOD","MIDDLE","MIGHT","MILE",
"MILITARY","MILK","MIND","MINE","MINISTER","MINISTRY","MINUTE","MISS",
"MISTAKE","MODEL","MODERN","MODULE","MOMENT","MONEY","MONTH","MORE",
"MORNING","MOST","MOTHER","MOTION","MOTOR","MOUNTAIN","MOUTH","MOVE",
"MOVEMENT","MUCH","MURDER","MUSEUM","MUSIC","MUST","MY","MYSELF","NAME",
"NARROW","NATION","NATIONAL","NATURAL","NATURE","NEAR","NEARLY",
"NECESSARILY","NECESSARY","NECK","NEED","NEGOTIATION","NEIGHBOUR","NEITHER",
"NETWORK","NEVER","NEVERTHELESS","NEW","NEWS","NEWSPAPER","NEXT","NICE",
"NIGHT","NO","NOBODY","NOD","NOISE","NONE","NOR","NORMAL","NORMALLY",
"NORTH","NORTHERN","NOSE","NOT","NOTE","NOTHING","NOTICE","NOTION","NOW",
"NUCLEAR","NUMBER","NURSE","OBJECT","OBJECTIVE","OBSERVATION","OBSERVE",
"OBTAIN","OBVIOUS","OBVIOUSLY","OCCASION","OCCUR","ODD","OF","OFF",
"OFFENCE","OFFER","OFFICE","OFFICER","OFFICIAL","OFTEN","OIL","OKAY","OLD",
"ON","ONCE","ONE","ONLY","ONTO","OPEN","OPERATE","OPERATION","OPINION",
"OPPORTUNITY","OPPOSITION","OPTION","OR","ORDER","ORDINARY","ORGANISATION",
"ORGANISE","ORGANIZATION","ORIGIN","ORIGINAL","OTHER","OTHERWISE","OUGHT",
"OUR","OURSELVES","OUT","OUTCOME","OUTPUT","OUTSIDE","OVER","OVERALL","OWN",
"OWNER","PACKAGE","PAGE","PAIN","PAINT","PAINTING","PAIR","PANEL","PAPER",
"PARENT","PARK","PARLIAMENT","PART","PARTICULAR","PARTICULARLY","PARTLY",
"PARTNER","PARTY","PASS","PASSAGE","PAST","PATH","PATIENT","PATTERN","PAY",
"PAYMENT","PEACE","PENSION","PEOPLE","PER","PERCENT","PERFECT","PERFORM",
"PERFORMANCE","PERHAPS","PERIOD","PERMANENT","PERSON","PERSONAL","PERSUADE",
"PHASE","PHONE","PHOTOGRAPH","PHYSICAL","PICK","PICTURE","PIECE","PLACE",
"PLAN","PLANNING","PLANT","PLASTIC","PLATE","PLAY","PLAYER","PLEASE",
"PLEASURE","PLENTY","PLUS","POCKET","POINT","POLICE","POLICY","POLITICAL",
"POLITICS","POOL","POOR","POPULAR","POPULATION","POSITION","POSITIVE",
"POSSIBILITY","POSSIBLE","POSSIBLY","POST","POTENTIAL","POUND","POWER",
"POWERFUL","PRACTICAL","PRACTICE","PREFER","PREPARE","PRESENCE","PRESENT",
"PRESIDENT","PRESS","PRESSURE","PRETTY","PREVENT","PREVIOUS","PREVIOUSLY",
"PRICE","PRIMARY","PRIME","PRINCIPLE","PRIORITY","PRISON","PRISONER",
"PRIVATE","PROBABLY","PROBLEM","PROCEDURE","PROCESS","PRODUCE","PRODUCT",
"PRODUCTION","PROFESSIONAL","PROFIT","PROGRAM","PROGRAMME","PROGRESS",
"PROJECT","PROMISE","PROMOTE","PROPER","PROPERLY","PROPERTY","PROPORTION",
"PROPOSE","PROPOSAL","PROSPECT","PROTECT","PROTECTION","PROVE","PROVIDE",
"PROVIDED","PROVISION","PUB","PUBLIC","PUBLICATION","PUBLISH","PULL",
"PUPIL","PURPOSE","PUSH","PUT","QUALITY","QUARTER","QUESTION","QUICK",
"QUICKLY","QUIET","QUITE","RACE","RADIO","RAILWAY","RAIN","RAISE","RANGE",
"RAPIDLY","RARE","RATE","RATHER","REACH","REACTION","READ","READER",
"READING","READY","REAL","REALISE","REALITY","REALIZE","REALLY","REASON",
"REASONABLE","RECALL","RECEIVE","RECENT","RECENTLY","RECOGNISE",
"RECOGNITION","RECOGNIZE","RECOMMEND","RECORD","RECOVER","RED","REDUCE",
"REDUCTION","REFER","REFERENCE","REFLECT","REFORM","REFUSE","REGARD",
"REGION","REGIONAL","REGULAR","REGULATION","REJECT","RELATE","RELATION",
"RELATIONSHIP","RELATIVE","RELATIVELY","RELEASE","RELEVANT","RELIEF",
"RELIGION","RELIGIOUS","RELY","REMAIN","REMEMBER","REMIND","REMOVE",
"REPEAT","REPLACE","REPLY","REPORT","REPRESENT","REPRESENTATION",
"REPRESENTATIVE","REQUEST","REQUIRE","REQUIREMENT","RESEARCH","RESOURCE",
"RESPECT","RESPOND","RESPONSE","RESPONSIBILITY","RESPONSIBLE","REST",
"RESTAURANT","RESULT","RETAIN","RETURN","REVEAL","REVENUE","REVIEW",
"REVOLUTION","RICH","RIDE","RIGHT","RING","RISE","RISK","RIVER","ROAD",
"ROCK","ROLE","ROLL","ROOF","ROOM","ROUND","ROUTE","ROW","ROYAL","RULE",
"RUN","RURAL","SAFE","SAFETY","SALE","SAME","SAMPLE","SATISFY","SAVE",
"SAY","SCALE","SCENE","SCHEME","SCHOOL","SCIENCE","SCIENTIFIC","SCIENTIST",
"SCORE","SCREEN","SEA","SEARCH","SEASON","SEAT","SECOND","SECONDARY",
"SECRETARY","SECTION","SECTOR","SECURE","SECURITY","SEE","SEEK","SEEM",
"SELECT","SELECTION","SELL","SEND","SENIOR","SENSE","SENTENCE","SEPARATE",
"SEQUENCE","SERIES","SERIOUS","SERIOUSLY","SERVANT","SERVE","SERVICE",
"SESSION","SET","SETTLE","SETTLEMENT","SEVERAL","SEVERE","SEX","SEXUAL",
"SHAKE","SHALL","SHAPE","SHARE","SHE","SHEET","SHIP","SHOE","SHOOT","SHOP",
"SHORT","SHOT","SHOULD","SHOULDER","SHOUT","SHOW","SHUT","SIDE","SIGHT",
"SIGN","SIGNAL","SIGNIFICANCE","SIGNIFICANT","SILENCE","SIMILAR","SIMPLE",
"SIMPLY","SINCE","SING","SINGLE","SIR","SISTER","SIT","SITE","SITUATION",
"SIZE","SKILL","SKIN","SKY","SLEEP","SLIGHTLY","SLIP","SLOW","SLOWLY",
"SMALL","SMILE","SO","SOCIAL","SOCIETY","SOFT","SOFTWARE","SOIL","SOLDIER",
"SOLICITOR","SOLUTION","SOME","SOMEBODY","SOMEONE","SOMETHING","SOMETIMES",
"SOMEWHAT","SOMEWHERE","SON","SONG","SOON","SORRY","SORT","SOUND","SOURCE",
"SOUTH","SOUTHERN","SPACE","SPEAK","SPEAKER","SPECIAL","SPECIES","SPECIFIC",
"SPEECH","SPEED","SPEND","SPIRIT","SPORT","SPOT","SPREAD","SPRING","STAFF",
"STAGE","STAND","STANDARD","STAR","START","STATE","STATEMENT","STATION",
"STATUS","STAY","STEAL","STEP","STICK","STILL","STOCK","STONE","STOP",
"STORE","STORY","STRAIGHT","STRANGE","STRATEGY","STREET","STRENGTH",
"STRIKE","STRONG","STRONGLY","STRUCTURE","STUDENT","STUDIO","STUDY","STUFF",
"STYLE","SUBJECT","SUBSTANTIAL","SUCCEED","SUCCESS","SUCCESSFUL","SUCH",
"SUDDENLY","SUFFER","SUFFICIENT","SUGGEST","SUGGESTION","SUITABLE","SUM",
"SUMMER","SUN","SUPPLY","SUPPORT","SUPPOSE","SURE","SURELY","SURFACE",
"SURPRISE","SURROUND","SURVEY","SURVIVE","SWITCH","SYSTEM","TABLE","TAKE",
"TALK","TALL","TAPE","TARGET","TASK","TAX","TEA","TEACH","TEACHER",
"TEACHING","TEAM","TEAR","TECHNICAL","TECHNIQUE","TECHNOLOGY","TELEPHONE",
"TELEVISION","TELL","TEMPERATURE","TEND","TERM","TERMS","TERRIBLE","TEST",
"TEXT","THAN","THANK","THANKS","THAT","THE","THEATRE","THEIR","THEM",
"THEME","THEMSELVES","THEN","THEORY","THERE","THEREFORE","THESE","THEY",
"THIN","THING","THINK","THIS","THOSE","THOUGH","THOUGHT","THREAT",
"THREATEN","THROUGH","THROUGHOUT","THROW","THUS","TICKET","TIME","TINY",
"TITLE","TO","TODAY","TOGETHER","TOMORROW","TONE","TONIGHT","TOO","TOOL",
"TOOTH","TOP","TOTAL","TOTALLY","TOUCH","TOUR","TOWARDS","TOWN","TRACK",
"TRADE","TRADITION","TRADITIONAL","TRAFFIC","TRAIN","TRAINING","TRANSFER",
"TRANSPORT","TRAVEL","TREAT","TREATMENT","TREATY","TREE","TREND","TRIAL",
"TRIP","TROOP","TROUBLE","TRUE","TRUST","TRUTH","TRY","TURN","TWICE","TYPE",
"TYPICAL","UNABLE","UNDER","UNDERSTAND","UNDERSTANDING","UNDERTAKE",
"UNEMPLOYMENT","UNFORTUNATELY","UNION","UNIT","UNITED","UNIVERSITY",
"UNLESS","UNLIKELY","UNTIL","UP","UPON","UPPER","URBAN","US","USE","USED",
"USEFUL","USER","USUAL","USUALLY","VALUE","VARIATION","VARIETY","VARIOUS",
"VARY","VAST","VEHICLE","VERSION","VERY","VIA","VICTIM","VICTORY","VIDEO",
"VIEW","VILLAGE","VIOLENCE","VISION","VISIT","VISITOR","VITAL","VOICE",
"VOLUME","VOTE","WAGE","WAIT","WALK","WALL","WANT","WAR","WARM","WARN",
"WASH","WATCH","WATER","WAVE","WAY","WE","WEAK","WEAPON","WEAR","WEATHER",
"WEEK","WEEKEND","WEIGHT","WELCOME","WELFARE","WELL","WEST","WESTERN",
"WHAT","WHATEVER","WHEN","WHERE","WHEREAS","WHETHER","WHICH","WHILE",
"WHILST","WHITE","WHO","WHOLE","WHOM","WHOSE","WHY","WIDE","WIDELY","WIFE",
"WILD","WILL","WIN","WIND","WINDOW","WINE","WING","WINNER","WINTER","WISH",
"WITH","WITHDRAW","WITHIN","WITHOUT","WOMAN","WONDER","WONDERFUL","WOOD",
"WORD","WORK","WORKER","WORKING","WORKS","WORLD","WORRY","WORTH","WOULD",
"WRITE","WRITER","WRITING","WRONG","YARD","YEAH","YEAR","YES","YESTERDAY",
"YET","YOU","YOUNG","YOUR","YOURSELF","YOUTH"};

static uint32_t wordcount42(char *w)
{   uint32_t count = 0;
    while (*w) count += *w++ - 64;
    return count;
}

static uint32_t opdracht42()
{   vector<uint32_t> triangles;
    for (uint32_t i = 0; i < 20; i++) triangles.push_back(triangle32(i));
    uint32_t ret = 0;
    uint32_t count = sizeof(words42) / 100;
    for (uint32_t i = 0; i < count; i++)
        if (linSearch32<uint32_t>(triangles, wordcount42(words42[i])))
            ret++;
    return ret;
}

/*
#43: Sub-string divisibility

The number, 1406357289, is a 0 to 9 pandigital number because it is made
up of each of the digits 0 to 9 in some order, but it also has a rather
interesting sub-string divisibility property.

Let d1 be the 1st digit, d2 be the 2nd digit, and
so on. In this way, we note the following:

d2d3d4=406 is divisible by 2
d3d4d5=063 is divisible by 3
d4d5d6=635 is divisible by 5
d5d6d7=357 is divisible by 7
d6d7d8=572 is divisible by 11
d7d8d9=728 is divisible by 13
d8d9d10=289 is divisible by 17

Find the sum of all 0 to 9 pandigital numbers with this property.
*/

static uint64_t concat43(vector<uint8_t> &v)
{   uint64_t ret = 0;
    for (uint32_t i = 0; i < v.size(); i++)
        ret += v.at(v.size() - 1 - i) * myPow<uint64_t>(10, i);
    return ret;
}

static void permutations43(vector<uint64_t> &ps, vector<uint8_t> &pool)
{   uint32_t n = pool.size(), i = 0, tmp = 0;
    vector<uint8_t> c(n, 0);
    ps.push_back(concat43(pool));
    while (i < n)
    {   if (c[i] < i)
        {   if (i % 2 == 0) tmp = pool[0], pool[0] = pool[i], pool[i] = tmp;
            else tmp = pool[c[i]], pool[c[i]] = pool[i], pool[i] = tmp;
            ps.push_back(concat43(pool));
            c[i]++, i = 0;
        } else c[i++] = 0;
    }
}

static bool test43(uint64_t n)
{   uint8_t divs[] = {17,13,11,7,5,3,2};
    for (uint8_t i = 0; i < 7; i++)
        if ((n / myPow<uint32_t>(10, i) % 1000) % divs[i] != 0)
            return false;
    return true;
}

static uint64_t opdracht43()
{   vector<uint64_t> ps;
    vector<uint8_t> pool;
    for (uint8_t i = 0; i <= 9; i++) pool.push_back(i);
    permutations43(ps, pool);
    uint64_t xsum = 0;
    for (auto n : ps) if (test43(n)) xsum += n;
    return xsum;
}

/*
#44: Pentagon numbers

Pentagonal numbers are generated by the formula,
Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which
their sum and difference are pentagonal and D = |Pk − Pj|
is minimised; what is the value of D?

Antwoord: 5,482,660
*/

static uint32_t opdracht44()
{   vector<uint32_t> lpgs;
    for (uint32_t i = 1; i < 9999; i++) lpgs.push_back(pentagon32(i));
    for (uint32_t i = 0; i < lpgs.size(); i++)
        for (uint32_t j = i; j < lpgs.size(); j++)
            if (binary_search(lpgs.begin() + j, lpgs.end(), lpgs[i] + lpgs[j]) &&
                binary_search(lpgs.begin(), lpgs.end(), lpgs[j] - lpgs[i]))
                return lpgs[j] - lpgs[i];
    return 0;
}

/*
#45: Triangular, pentagonal, and hexagonal

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle     Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
Pentagonal     Pn=n(3n−1)/2     1, 5, 12, 22, 35, ...
Hexagonal     Hn=n(2n−1)     1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

Antwoord: 1,533,776,805
*/

/*
T55,385 = P31,977 = H27,693 = 1,533,776,805
*/

// T65,535 = H32768 = 2,147,450,880

static uint32_t opdracht45()
{   vector<uint32_t> vp, vh;
    for (uint32_t i = 166; i < 32000; i++) vp.push_back(pentagon32(i));
    for (uint32_t i = 144; i < 46000; i++) vh.push_back(hexagon32(i));
    for (auto h : vh)
        if (binary_search(vp.begin(), vp.end(), h))
            return h;
    return 0;
}

/*
#46: Goldbach's other conjecture

It was proposed by Christian Goldbach that every odd composite
number can be written as the sum of a prime and twice a square.

9 = 7 + 2×1^2
15 = 7 + 2×2^2
21 = 3 + 2×3^2
25 = 7 + 2×3^2
27 = 19 + 2×2^2
33 = 31 + 2×1^2

It turns out that the conjecture was false.

What is the smallest odd composite that cannot be
written as the sum of a prime and twice a square?

Antwoord: 5,777
*/

static uint64_t pair46(vector<uint32_t> &primes, vector<uint32_t> &squares, uint32_t n)
{   for (auto prime : primes)
    {   if (prime > n) break;
        if (binary_search(squares.begin(), squares.end(), n - prime))
            return (uint64_t)prime << 32 | (n - prime);
    }
    return 0;
}

static uint32_t opdracht46()
{   vector<uint32_t> primes, squares;
    sieve32(primes, 999999);
    for (uint32_t i = 0; i < 100; i++) squares.push_back(2*i*i);
    for (uint32_t i = 3; i < 987654321; i += 2)
    {   if (binary_search(primes.begin(), primes.end(), i)) continue;
        uint64_t pr = pair46(primes, squares, i);
        if (pr == 0) return i;
    }
    return 0;
}

/*
#47: Distinct primes factors

The first two consecutive numbers to have two distinct prime factors are:

14 = 2 × 7
15 = 3 × 5

The first three consecutive numbers to have three distinct prime factors are:

644 = 2^2 × 7 × 23
645 = 3 × 5 × 43
646 = 2 × 17 × 19.

Find the first four consecutive integers to have four distinct
prime factors each. What is the first of these numbers?

Antwoord: 134,043
*/

static uint32_t primefactor47(vector<uint32_t> &primes, uint32_t n)
{   for (uint32_t i = 0; true; i++) if (n % primes.at(i) == 0) return primes.at(i);
}

static uint32_t primeFactors47(vector<uint32_t> &primes, uint32_t n)
{   set<uint32_t> factors;
    while (true)
    {   uint32_t factor = primefactor47(primes, n);
        factors.insert(factor);
        if (factor == n) break;
        n = n / factor;
    }
    return factors.size();
}

static uint32_t opdracht47(uint32_t distinct = 4, uint32_t window = 200000)
{   vector<bool> v(window, true);
    v[0] = v[1] = false;
    for (uint32_t p = 2; p * p < v.size(); p++)
        if (v[p]) for (uint32_t i = p * 2; i < v.size(); i += p) v[i] = false;
    vector<uint32_t> primes;
    for (uint32_t i = 0; i < v.size(); i++) if (v[i]) primes.push_back(i);
    for (uint32_t i = 2, chain = 0; i < window; i++)
    {   chain = primeFactors47(primes, i) == distinct ? chain + 1 : 0;
        if (chain == distinct) return i - (distinct - 1);
    }
    return 0;
}

/*
#48: Self powers
*/

static uint64_t opdracht48()
{   uint64_t result = 0, modulo = 10000000000;
    for (uint16_t i = 1; i <= 1000; i++)
    {   uint64_t temp = i;
        for (uint16_t j = 1; j < i; j++) temp *= i, temp %= modulo;
        result += temp, result %= modulo;
    }
    return result;
}

/*
#49: Prime permutations

The arithmetic sequence, 1487, 4817, 8147, in which each of the terms
increases by 3330, is unusual in two ways: (i) each of the three terms
are prime, and, (ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit
primes, exhibiting this property, but there is one other 4-digit
increasing sequence.

What 12-digit number do you form by concatenating the three terms in this sequence?

Antwoord: 296,962,999,629
*/

static bool hasSameDigits(uint32_t a, uint32_t b)
{   vector<uint8_t> nset;
    for (;a ;a = a / 10) nset.push_back(a % 10);
    return hasDigitsOnce32(b, nset);
}

static uint64_t check(vector<uint32_t> &v)
{   for (auto n : v)
    {   if (linSearch32<uint32_t>(v, n + 3330) && linSearch32<uint32_t>(v, n + 6660) &&
            hasSameDigits(n, n + 3330) && hasSameDigits(n, n + 6660))
        {   return (n + 6660) + (n + 3330) * 10000 + (uint64_t)n * 100000000;
        }
    }
    return 0;
}

static uint64_t opdracht49()
{   vector<uint32_t> primes, primes4;
    sieve32(primes, 9999);
    for (auto p : primes) if (p > 1487) primes4.push_back(p);
    return check(primes4);
}

/*
#50: Consecutive prime sum

The prime 41, can be written as the sum of six consecutive primes:
41 = 2 + 3 + 5 + 7 + 11 + 13

This is the longest sum of consecutive primes that adds to a prime below one-hundred.

The longest sum of consecutive primes below one-thousand
that adds to a prime, contains 21 terms, and is equal to 953.

Which prime, below one-million, can be written as the sum of the most consecutive primes?

Antwoord: 997,651
*/

static uint32_t opdracht50(uint32_t limit = 1000000)
{   vector<bool> v(1000000, true);
    v[0] = v[1] = false;
    for (uint32_t p = 2; p * p < v.size(); p++)
        if (v[p]) for (uint32_t i = p * 2; i < v.size(); i += p) v[i] = false;
    vector<uint32_t> primes;
    for (uint32_t i = 0; i < v.size(); i++) if (v[i]) primes.push_back(i);
    uint32_t best_prime = 0, best_sum = 0;
    for (uint32_t i = 0; i < primes.size(); i++)
    {   for (uint32_t j = i + best_sum; j < primes.size(); j++)
        {   uint32_t xsum = 0;
            for (uint32_t k = i; k <= j; k++) xsum += primes.at(k);
            if (xsum >= limit) break;
            uint32_t sublen = (j + 1) - i;
            if (binary_search(primes.begin(), primes.end(), xsum) && sublen > best_sum)
                best_sum = sublen, best_prime = xsum;
        }
    }
    return best_prime;
}

/*
#51: Prime digit replacements

By replacing the 1st digit of the 2-digit number *3, it turns out that six
of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

By replacing the 3rd and 4th digits of 56**3 with the same digit, this
5-digit number is the first example having seven primes among the ten
generated numbers, yielding the family: 56003, 56113, 56333, 56443,
56663, 56773, and 56993. Consequently 56003, being the first member of
this family, is the smallest prime with this property.

Find the smallest prime which, by replacing part of the number (not
necessarily adjacent digits) with the same digit, is part of an eight
prime value family.

Antwoord: 121,313
*/

static void binarize51(vector<uint32_t> &out, uint32_t n)
{   uint32_t div = 2, dec = 1;
    while (n)
    {   out.push_back(n % div ? dec : 0);
        n -= n % div;
        div *= 2;
        dec *= 10;
    }
}

static void family51(vector<uint32_t> &out, vector<uint32_t> &primes, uint32_t n, uint32_t mask)
{   uint32_t xlen = decimals32(n);
    vector<uint32_t> bmask;
    binarize51(bmask, mask);
    for (uint32_t i = 0; i < bmask.size(); i++)
        n -= bmask.at(i) * digit32(n, i);
    for (uint32_t i = 0; i < 10; i++)
    {   uint32_t tmp = n;
        for (auto b : bmask) tmp += b * i;
        if (decimals32(tmp) == xlen && binary_search(primes.begin(), primes.end(), tmp))
            out.push_back(tmp);
    }
}

static uint32_t opdracht51()
{   vector<bool> v(1000000, true);
    v[0] = v[1] = false;
    for (uint32_t p = 2; p * p < v.size(); p++)
        if (v[p]) for (uint32_t i = p * 2; i < v.size(); i += p) v[i] = false;
    vector<uint32_t> primes;
    for (uint32_t i = 0; i < v.size(); i++) if (v[i]) primes.push_back(i);
    for (auto p : primes)
    {   for (uint32_t mask = 1; mask < myPow<uint32_t>(2, decimals32(p)); mask++)
        {   vector<uint32_t> fam;
            family51(fam, primes, p, mask);
            if (fam.size() == 8) return fam.at(0);
        }
    }
    return 0;
}

/*
#52: Pandigital multiples

It can be seen that the number, 125874, and its double, 251748,
contain exactly the same digits, but in a different order.

Find the smallest positive integer, x, such that
2x, 3x, 4x, 5x, and 6x, contain the same digits.

Antwoord: 142,857
*/

static bool test52(uint32_t n)
{   vector<uint8_t> nset;
    for (uint32_t x = n; x; x = x / 10) nset.push_back(x % 10);
    for (uint32_t m = 2; m <= 6; m++)
    {   vector<uint8_t> nset2;
        for (auto x : nset) nset2.push_back(x);
        if (hasDigitsOnce32(n * m, nset2) == false) return false;
    }
    return true;
}

static uint32_t opdracht52()
{   for (uint32_t n = 2; n < 200000; n++) if (test52(n)) return n;
    return 0;
}

/*
#53: Combinatoric selections

There are exactly ten ways of selecting three from five, 12345:

123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

In combinatorics, we use the notation, 5C3 = 10.

In general,
nCr =  
n!
r!(n−r)!
 ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.

It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.

How many, not necessarily distinct, values of  nCr,
for 1 ≤ n ≤ 100, are greater than one-million?

Antwoord: 4,075
*/

static uint32_t opdracht53()
{   static constexpr uint8_t nlimit = 101;
    static constexpr uint32_t limit = 1000000;
    uint32_t tree[nlimit][nlimit];
    for (uint8_t i = 0; i < nlimit; i++)
        for (uint8_t j = 0; j < nlimit; j++)
            tree[i][j] = 0;
    tree[0][0] = 1;
    for (uint8_t i = 0; i < nlimit - 1; i++)
    {   tree[i + 1][0] = 1;
        for (uint8_t j = 0; j <= i; j++)
        {   tree[i + 1][j + 1] = tree[i][j] + tree[i][j + 1];
            if (tree[i + 1][j + 1] > 1000001)
                tree[i + 1][j + 1] = 1000001;
        }
    }
    uint32_t ncount = 0;
    for (uint8_t i = 0; i < nlimit; i++)
        for (uint8_t j = 0; j < nlimit; j++)
            if (tree[i][j] > limit) ncount++;
    return ncount;
}

/*
Einde opdrachten
*/

static uint64_t run(uint32_t p)
{
    switch (p)
    {
    case 1: return multiples1();
    case 2: return fibonacci();
    case 3: return maxprimefactor3();
    case 4: return opdracht4();
    case 5: return divide();
    case 6: return opdracht6();
    case 7: return opdracht7();
    case 8: return opdracht8();
    case 9: return opdracht9();
    case 10: return opdracht10();
    case 11: return opdracht11();
    case 12: return opdracht12();
    case 13: return opdracht13();
    case 14: return opdracht14();
    case 15: return opdracht15();
    case 16: return opdracht16();
    case 17: return opdracht17();
    case 18: return opdracht18();
    case 19: return opdracht19();
    case 20: return opdracht20();
    case 21: return amicable_pairs_sum();
    case 22: return opdracht22();
    case 23: return opdracht23();
    case 24: return opdracht24();
    case 25: return opdracht25();
    case 26: return opdracht26();
    case 27: return opdracht27();
    case 28: return opdracht28();
    case 29: return opdracht29();
    case 30: return opdracht30();
    case 31: return opdracht31();
    case 32: return opdracht32();
    case 33: return opdracht33();
    case 34: return opdracht34();
    case 35: return opdracht35();
    case 36: return opdracht36();
    case 37: return opdracht37();
    case 38: return opdracht38();
    case 39: return opdracht39();
    case 40: return opdracht40();
    case 41: return opdracht41();
    case 42: return opdracht42();
    case 43: return opdracht43();
    case 44: return opdracht44();
    case 45: return opdracht45();
    case 46: return opdracht46();
    case 47: return opdracht47();
    case 48: return opdracht48();
    case 49: return opdracht49();
    case 50: return opdracht50();
    case 51: return opdracht51();
    case 52: return opdracht52();
    case 53: return opdracht53();
    }
    return 0;
}

uint64_t answers[] = {233168, 4613732, 6857, 906609, 232792560, 25164150, 104743, 23514624000,
    31875000, 142913828922, 70600674, 76576500, 5537376230, 837799, 137846528820,
    1366, 21124, 1074, 171, 648, 31626, 871198282, 4179871, 2783915460, 4782, 983, 0,
    669171001, 9183, 443839, 73682, 45228, 100, 40730, 55, 872187, 748317,
    932718654, 840, 210, 7652413, 162, 16695334890, 5482660, 1533776805, 5777,
    134043, 9110846700, 296962999629, 997651, 121313, 142857, 4075, 376};

#ifdef MULTITHREAD
class ThreadPool {
public:
    ThreadPool(size_t);
    template<class F, class... Args>
    auto enqueue(F&& f, Args&&... args)
        -> std::future<typename std::result_of<F(Args...)>::type>;
    ~ThreadPool();
private:
    // need to keep track of threads so we can join them
    std::vector< std::thread > workers;
    // the task queue
    std::queue< std::function<void()> > tasks;

    // synchronization
    std::mutex queue_mutex;
    std::condition_variable condition;
    bool stop;
};

// the constructor just launches some amount of workers
inline ThreadPool::ThreadPool(size_t threads) : stop(false)
{
    for(size_t i = 0;i<threads;++i)
        workers.emplace_back(
            [this]
            {
                for(;;)
                {
                    std::function<void()> task;

                    {
                        std::unique_lock<std::mutex> lock(this->queue_mutex);
                        this->condition.wait(lock,
                            [this]{ return this->stop || !this->tasks.empty(); });
                        if(this->stop && this->tasks.empty())
                            return;
                        task = std::move(this->tasks.front());
                        this->tasks.pop();
                    }

                    task();
                }
            }
        );
}

template<class F, class... Args>
auto ThreadPool::enqueue(F&& f, Args&&... args)
    -> std::future<typename std::result_of<F(Args...)>::type>
{
    using return_type = typename std::result_of<F(Args...)>::type;

    auto task = std::make_shared< std::packaged_task<return_type()> >(
            std::bind(std::forward<F>(f), std::forward<Args>(args)...)
        );

    std::future<return_type> res = task->get_future();
    {
        std::unique_lock<std::mutex> lock(queue_mutex);

        // don't allow enqueueing after stopping the pool
        if(stop)
            throw std::runtime_error("enqueue on stopped ThreadPool");

        tasks.emplace([task](){ (*task)(); });
    }
    condition.notify_one();
    return res;
}

// the destructor joins all threads
inline ThreadPool::~ThreadPool()
{
    {
        std::unique_lock<std::mutex> lock(queue_mutex);
        stop = true;
    }
    condition.notify_all();
    for(std::thread &worker: workers)
        worker.join();
}
#endif

volatile bool simple_locked = false;

static void runjob(uint32_t n)
{
    time_t begin = time(0);
    uint64_t answer = run(n);

    if (answer != answers[n - 1])
        throw "error";

    time_t end = time(0);
    
    while (simple_locked);
    simple_locked = true;
    cout << "#" << (uint16_t)n << ": " << answer << " " << end - begin << "s\r\n";
    simple_locked = false;
}

#ifdef MULTITHREAD
static void multithread(uint8_t max)
{
    ThreadPool pool(4);
    std::vector< std::future<void> > results;

    for (uint8_t i = 1; i <= max; ++i)
    {
        results.emplace_back(pool.enqueue([i] { runjob(i); }));
    }
}
#else
static void singlethread(uint8_t max)
{
     for (uint8_t i = 1; i <= max; i++)
        runjob(i);   
}
#endif

int main()
{
    answers[27 - 1] = 0;
#ifdef MULTITHREAD
    multithread(53);
#else
    singlethread(53);
#endif
    return 0;
}


