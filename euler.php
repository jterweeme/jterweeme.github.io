<!DOCTYPE html>

<?php
echo file_get_contents("achtung.html");
?>

<html>
<head>
<title>Project Euler</title>
<link rel="stylesheet" type="text/css" href="common.css"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<style>
code, kbd, samp {
    white-space: pre;
}

var {
    font-family: monospace;
    font-style: normal;
}

samp {
    color: gray;
}

code em {
    font-style: normal;
    color: red;
}
</style>
</head>
<body>
<?php
require_once("mainmenu.php");
$mm = new MainMenu();
echo $mm;
?>

<main style="width: 900px;">
<h1>Project Euler</h1>
<h2>#1: Multiples of 3 and 5</h2>
<p>
If we list all the natural numbers below 10 that are multiples
of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
</p>
<p>
Find the sum of all the multiples of 3 or 5 below 1000.
</p>
<code>
limit = 1000, xsum = 0;
for (var x = 1; x &lt; limit; x++)
    if (x % 3 == 0 || x % 5 == 0)
        xsum += x;
alert(xsum);    // should give 233,168
</code>

<hr/>
<h2>#2: Even Fibonacci numbers</h2>
<p>
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:
</p>
<p>
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
</p>
<p>
By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms.
</p>
<code>
function opdracht2() {
    var xmax = 4000000, term1 = 1, term2 = 2, temp = 0, xsum = 0;
    if (term1 % 2 == 0) xsum += term1
    if (term2 % 2 == 0) xsum += term2
    while ((temp = term1 + term2) &lt;= xmax) {
        if (temp % 2 == 0) xsum += temp;
        term1 = term2;
        term2 = temp;
    }
    return xsum;
}
alert(opdracht2());  // should give 4,613,732
</code>

<hr/>
<h2>#3: Largest prime factor</h2>
<p>
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600,851,475,143?
</p>
<code>
function primefactors(n) {
    var primes = [];
    var factors = [];
    function primefactor(primes, n = 13195) {
        function appendprime(primes) {
            if (primes.length &lt; 1) primes.push(2);
            if (primes.length &lt; 2) primes.push(3);
            p = primes[primes.length - 1] + 2;
            for (var i = 2; i &lt; p; i++) {
                if (p % i == 0) {
                    p++;
                    i = 1;
                }
            }
            primes.push(p);
            return primes;
        }
        for (var i = 0; true; i++) {
            if (primes.length &lt;= i) appendprime(primes);
            if (n % primes[i] == 0) return primes[i];
        }
    }
    while (1) {
        var factor = primefactor(primes, n);
        factors.push(factor);
        if (factor == n) break;
        n = Math.floor(n / factor);
    }
    return factors
}

var factors = primefactors(600851475143);
answer = Math.max.apply(null, factors);
alert(answer);  // should be 6,857
</code>

<hr/>
<h2>#4: Largest palindrome product</h2>
<p>
A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 x 99.
</p>
<p>
Find the largest palindrome made from the product of two 3-digit numbers.
</p>
<code>
function ispalindrome(n) {
    var temp = n, rev = 0;
    while (temp != 0) {
        rev = rev * 10 + temp % 10;
        temp = Math.floor(temp / 10);
    }
    return n == rev;
}
best = 0;
for (var a = 100; a &lt; 1000; a++) {
    for (var b = 100; b &lt; 1000; b++) {
        var c = a * b;
        if (ispalindrome(c) &amp;&amp; c &gt; best) best = c;
    }
}
alert(best);    // should be 906,609
</code>

<hr/>
<h2>#5: Smallest multiple</h2>
<p>
2520 is the smallest number that can be divided by
each of the numbers from 1 to 10 without any remainder.
</p>
<p>
What is the smallest positive number that is evenly
divisible by all of the numbers from 1 to 20?
</p>

<code>
function isdivisible(n, l) {
    for (var i = 0; i &lt; l.length; i++)
        if (n % l[i] &gt; 0)
            return 0;
    return 1;
}
var start = 2520, number = start;
while (isdivisible(number, [11,12,13,14,15,16,17,18,19,20]) == 0)
    number += start;
alert(number);  // shouuld give 232,792,560
</code>

<hr/>
<h2>#6: Sum square difference</h2>
<p>
The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385
</p>
<p>
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025
</p>
<p>
Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 - 385 = 2640.
</p>
<p>
Find the difference between the sum of the squares of the
first one hundred natural numbers and the square of the sum.
</p>
<code>
function opdracht6() {
    var sumsquare = 0, squaresum = 0;
    for (var x = 1; x &lt;= 100; x++) { sumsquare += x**2; squaresum += x; }
    squaresum = squaresum ** 2;
    return squaresum - sumsquare;
}
alert(opdracht6());     // should give 25,164,150
</code>

<hr/>
<h2>#7: 10001st prime</h2>
<p>
By listing the first six prime numbers: 2, 3, 5,
7, 11, and 13, we can see that the 6th prime is 13.
</p>
<p>
What is the 10 001st prime number?
</p>
<code>
function opdracht7() {
    function reducer(n, presets = [300, 100, 8]) {
        for (var i = 0; i &lt; presets.length; i++)
            if (n &gt; presets[i] * presets[i]) return Math.floor(n / presets[i]);
        return n;
    }
    var p = 3;
    var sqp = reducer(p), ret = 0, n = 10001;
    for (var j = 0; j &lt; n - 1; j++) {
        for (var i = 2; i &lt; sqp; i++) {
            if (p % i == 0) {
                p++;
                sqp = reducer(p);
                i = 1
            }
        }
        ret = p;
        p += 2;
        sqp = reducer(p);
    }
    return ret;
}
alert(opdracht7());     // should give 104,743
</code>

<hr/>
<h2>#9 Special Pythagorean triplet</h2>
<p>
A Pythagorean triplet is a set of three natural
numbers, a &lt; b &lt; c, for which, a2 + b2 = c2
</p>
<p>
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
</p>
<p>
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
</p>
<code>
function opdracht9(search = 1000) {
    for (var a = 1; a &lt; search - 1; a++) {
        for (var b = 1; b &lt; search - a; b++) {
            c = search - a - b;
            if (a * a + b * b == c * c) return a * b * c;
        }
    }
    return 0;
}
alert(opdracht9()); // should give 31,875,000
</code>

<hr/>
<h2>#10 Summation of primes</h2>
<p>
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
</p>
<p>
Find the sum of all the primes below two million.
</p>
<code>
function opdracht10(max = 2000000 - 1) {
    var v = Array(max).fill(true);
    v[0] = v[1] = false;
    for (var p = 2; p * p &lt;= max; p++)
        if (v[p] == true) for (i = p * 2; i &lt;= max; i += p) v[i] = false;
    var sum = 0;
    for (i = 1; i &lt;= max; i++) sum += v[i] == true ? i : 0;
    return sum;
}
alert(opdracht10());    // should give 142,913,828,922
</code>

<hr/>
<h2>#12 Highly divisible triangular number</h2>
<p>
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
first ten terms would be:
</p>
<p>
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
</p>
<p>
Let us list the factors of the first seven triangle numbers:
</p>
<pre>
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
</pre>
<p>
We can see that 28 is the first triangle number to have over five divisors.
</p>
<p>
What is the value of the first triangle number to have over five hundred divisors?
</p>
<code>
function opdracht12(divisors = 500) {
    function triangler(n) { return n * (n + 1) &gt;&gt; 1; }
    function n_divs(n) {
        if (n % 2 == 0) n = n &gt;&gt; 1;
        var divisors = 1, count = 0;
        while (n % 2 == 0) count++, n = n &gt;&gt; 1;
        divisors = divisors * (count + 1);
        for (var p = 3; n != 1; p += 2) {
            count = 0;
            while (n % p == 0) count++, n = Math.floor(n / p);
            divisors = divisors * (count + 1);
        }
        return divisors;
    }
    function find_triangular_index(factor_limit = 500) {
        n = 1;
        for (var lnum = n_divs(n), rnum = n_divs(n + 1); lnum * rnum &lt; factor_limit;)
            ++n, lnum = rnum, rnum = n_divs(n + 1);
        return n;
    }
    index = find_triangular_index(divisors);
    return triangler(index);
}
alert(opdracht12());    // should give 76,576,500
</code>

<hr/>
<h2>#15: Lattice paths</h2>
<p>
Starting in the top left corner of a 2x2 grid, and only being able to move
to the right and down, there are exactly 6 routes to the bottom right corner.
</p>
<p>
How many such routes are there through a 20x20 grid?
</p>
<code>
function opdracht15() {
    paths = 1, size = 20;
    for (var i = 0; i &lt; size; i++) {
        paths = paths * (2 * size - i);
        paths = Math.floor(paths / (i + 1));
    }
    return paths;
}
alert(opdracht15());   // should give 137,846,528,820
</code>

<hr/>
<h2>#17 Number letter counts</h2>
<p>
If the numbers 1 to 5 are written out in words: one, two, three, four,
five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
</p>
<p>
If all the numbers from 1 to 1000 (one thousand) inclusive
were written out in words, how many letters would be used?
</p>
<p>
NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
forty-two) contains 23 letters and 115 (one hundred and fifteen) contains
20 letters. The use of "and" when writing out numbers is in compliance
with British usage.
</p>
<code>
function opdracht17() {
    var arr = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen",
        "seventeen", "eighteen", "nineteen",
        "twenty", "thirty", "forty", "fifty", "sixty",
        "seventy", "eighty", "ninety"];

    var xsum = 0;
    for (var i = 0; i &lt; 19; i++) xsum += arr[i].length;
    for (var i = 19; i &lt; 27; i++) {
        xsum += arr[i].length;
        for (var j = 0; j &lt; 9; j++) xsum += arr[i].length + arr[j].length;
    }
    for (var i = 0; i &lt; 9; i++) {
        xsum += arr[i].length + "hundred".length;
        for (var j = 0; j &lt; 19; j++)
            xsum += arr[i].length + "hundred".length
    }
    return xsum;
}
</code>

<hr/>
<h2>#24: Lexicographic permutations</h2>
<p>
A permutation is an ordered arrangement of objects. For example, 3124 is
one possible permutation of the digits 1, 2, 3 and 4. If all of the
permutations are listed numerically or alphabetically, we call it
lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
</p>
<p>012   021   102   120   201   210</p>
<p>
What is the millionth lexicographic permutation
of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
</p>
<code>
function opdracht24(a = [0,1,2,3,4,5,6,7,8,9], perm = 1000000 - 1) {
    function factorial(n) {
        var xsum = 1;
        for (i = 1; i &lt;= n; i++) xsum *= i;
        return xsum;
    }
    function concat(lst) {
        var ret = 0;
        for (i = 0; i &lt; lst.length; i++)
            ret += lst[9 - i] * 10**i;
        return ret;
    }
    var b = a;
    var permx = perm;
    lst = []
    for (var j = 0; j &lt; 10; j++) {
        var fact = factorial(b.length - 1);
        var i = Math.floor(permx / fact);
        permx = permx % fact;
        lst.push(b[i]);
        b.splice(i, 1);
    }
    return concat(lst);
}
alert(opdracht24());    // should give 2,783,915,460
</code>

<hr/>
<h2>#28 Number spiral diagonals</h2>

<p>
Starting with the number 1 and moving to the right in a
clockwise direction a 5 by 5 spiral is formed as follows:
</p>

<pre>
21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13
</pre>

<p>
It can be verified that the sum of the numbers on the diagonals is 101.

What is the sum of the numbers on the diagonals
in a 1001 by 1001 spiral formed in the same way?
</p>
<code>
function opdracht28(root = 1001) {
    var xsum = 1, foo = 1, step = 2;
    for (var step = 2; foo &lt; root * root; step += 2) {
        for (var i = 0; i &lt; 4; i++) {
            foo += step;
            xsum += foo;
        }
    }
    return xsum;
}
alert(opdracht28());    // should give 669,171,001
</code>

<hr/>
<h2>#29: Distinct powers</h2>
<p>
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
</p>
<pre>
22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
</pre>
<p>
If they are then placed in numerical order, with any repeats
removed, we get the following sequence of 15 distinct terms:
</p>
<p>
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
</p>
<p>
How many distinct terms are in the sequence
generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
</p>
<code>
// werkt nog niet

function opdracht29() {
    lst = new Set();
    for (var a = 2; a &lt;= 100; a++)
        for (var b = 2; b &lt;= 100; b++)
            lst.add(a**b);
    return lst;
}
alert(opdracht29());
</code>
</main>
</body>
</html>



